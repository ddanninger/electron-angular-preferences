{"version":3,"sources":["ng://electron-ng-preferences/lib/services/electron.service.ts","ng://electron-ng-preferences/lib/electron-ng-preferences.component.ts","ng://electron-ng-preferences/lib/main/flash-message/flash-message.component.ts","ng://electron-ng-preferences/lib/services/validation.service.ts","ng://electron-ng-preferences/lib/main/group/fields/button.ts","ng://electron-ng-preferences/lib/main/group/fields/boolean.ts","ng://electron-ng-preferences/lib/main/group/fields/message.ts","ng://electron-ng-preferences/lib/main/group/fields/dropdown.ts","ng://electron-ng-preferences/lib/main/group/fields/radio.ts","ng://electron-ng-preferences/lib/main/group/fields/textbox.ts","ng://electron-ng-preferences/lib/main/group/fields/directory.ts","ng://electron-ng-preferences/lib/main/group/fields/checkbox.ts","ng://electron-ng-preferences/lib/main/group/group.component.ts","ng://electron-ng-preferences/lib/main/group/validators/dynamic.validator.ts","node_modules/tslib/tslib.es6.js","ng://electron-ng-preferences/lib/sidebar/sidebar.component.ts","ng://electron-ng-preferences/lib/main/main.component.ts","ng://electron-ng-preferences/lib/electron-ng-preferences.module.ts"],"names":["ElectronService","this","isElectron","ipcRenderer","window","require","webFrame","remote","childProcess","fs","prototype","process","type","getOSLocale","app","getLocale","Injectable","args","providedIn","ElectronNgPreferencesComponent","electronService","_this","options","sendSync","preferences","defaults","sections","filter","section","enabled","forEach","name","length","activeSection","console","log","ngOnInit","sectionChanged","Component","selector","template","FlashMessageComponent","showMessage","ngOnChanges","changes","manageMessage","message","currentValue","setTimeout","Input","ValidationService","rxIpc","default","validateAsync","val","runCommand","actionAsync","form","BtnFieldComponent","validationService","field","runAction","actionName","action","substr","value","subscribe","res","BooleanComponent","Object","defineProperty","controls","setValue","onChange","isBoolean","MessageComponent","DropDownComponent","RadioComponent","TextBoxComponent","valid","dirty","DirectoryComponent","btnLabel","dialog","chooseFolder","showOpenDialog","properties","CheckBoxComponent","onChecklistChange","checked","opt","flattenValues","checkboxes","c","map","GroupComponent","cdRef","markForCheck","group","fields","fieldsCtrls","f","validators","asyncValidators","required","push","Validators","validator","dynamicAsyncValidatorFn","validatorName","control","valueChanges","pipe","debounceTime","distinctUntilChanged","take","switchMap","success","dynamicError","e","catchError","tap","markAsTouched","of","this_1","dynamicValidatorFn","o","includes","fixedValue","FormControl","addControl","_b","__values","m","Symbol","iterator","i","call","next","done","tslib_1.__values","_c","changeDetection","ChangeDetectionStrategy","OnPush","ChangeDetectorRef","SidebarComponent","sectionChange","EventEmitter","selectSection","emit","onSave","Output","MainComponent","get","validatorOptions","validationOn","updateOn","formGroups","s","FormGroup","save","showSavedMessage","send","pending","statusChanges","status","showErrorMessage","flashMessage","level","FlashMessageLevel","onSubmit","preventDefault","sectionForm","sectionPreferences","groupInActiveSelection","groups","find","g","id","ElectronNgPreferencesModule","library","add","fas","NgModule","declarations","providers","imports","CommonModule","ReactiveFormsModule","FontAwesomeModule","UiSwitchModule","exports"],"mappings":"23BAAA,IAAAA,EAAA,WAgBE,SAAAA,IAEMC,KAAKC,eAEPD,KAAKE,YAAcC,OAAOC,QAAQ,YAAYF,YAE9CF,KAAKK,SAAWF,OAAOC,QAAQ,YAAYC,SAE3CL,KAAKM,OAASH,OAAOC,QAAQ,YAAYE,OAEzCN,KAAKO,aAAeJ,OAAOC,QAAQ,iBAEnCJ,KAAKQ,GAAKL,OAAOC,QAAQ,cAI7BL,EAAAU,UAAAR,WAAA,WAEE,OAAOE,QAAUA,OAAOO,SAAWP,OAAOO,QAAQC,MAGpDZ,EAAAU,UAAAG,YAAA,WACE,GAAIZ,KAAKC,cAAgBD,KAAKM,QAAUN,KAAKM,OAAOO,IAClD,OAAOb,KAAKM,OAAOO,IAAIC,iCAjC5BC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,sJAPd,GCAAC,EAAA,WAcE,SAAAA,EAAoBC,GAApB,IAAAC,EAAApB,KAAoBA,KAAAmB,gBAAAA,EAClBnB,KAAKqB,QAAUrB,KAAKmB,gBAAgBjB,YAAYoB,SAC9C,wBAEFtB,KAAKuB,YAAcvB,KAAKmB,gBAAgBjB,YAAYoB,SAClD,kBAEFtB,KAAKwB,SAAWxB,KAAKmB,gBAAgBjB,YAAYoB,SAAS,eAE1DtB,KAAKqB,QAAQI,SAAWzB,KAAKqB,QAAQI,SAASC,OAAM,SAClDC,GAAW,OAACA,EAAQC,UAGtB5B,KAAKqB,QAAQI,SAASI,QAAO,SAACF,GACvBP,EAAKG,YAAYI,EAAQG,QAC5BV,EAAKG,YAAYI,EAAQG,MAAQ,MAIF,EAA/B9B,KAAKqB,QAAQI,SAASM,SACxB/B,KAAKgC,cAAgBhC,KAAKqB,QAAQI,SAAS,IAG7CQ,QAAQC,IAAI,oCAAqClC,KAAKqB,QAASrB,KAAKuB,YAAavB,KAAKwB,SAAUxB,KAAKgC,eAUzG,OAPEd,EAAAT,UAAA0B,SAAA,WACEF,QAAQC,IAAI,+BAAgClC,KAAKqB,QAASrB,KAAKuB,YAAavB,KAAKwB,SAAUxB,KAAKgC,gBAGlGd,EAAAT,UAAA2B,eAAA,SAAeT,GACb3B,KAAKgC,cAAgBL,uBAzCxBU,EAAAA,UAASrB,KAAA,CAAC,CACTsB,SAAU,0BACVC,SAAA,05BANOxC,KA+CTmB,EA/CA,GCAAsB,EAAA,WAwBE,SAAAA,IACExC,KAAKyC,aAAc,EAiBvB,OAdED,EAAA/B,UAAAiC,YAAA,SAAYC,GACV3C,KAAK4C,cAAcD,EAAQE,QAAQC,eAErCN,EAAA/B,UAAAmC,cAAA,SAAcC,GAAd,IAAAzB,EAAApB,KACM6C,GAAWA,EAAQA,SAAoC,EAAzBA,EAAQA,QAAQd,SAChD/B,KAAK6C,QAAUA,EACf7C,KAAKyC,aAAc,EAEnBM,WAAU,WACR3B,EAAKqB,aAAc,EACnBrB,EAAKyB,QAAU,MACd,2BArCRR,EAAAA,UAASrB,KAAA,CAAC,CAETsB,SAAU,gBACVC,SAAU,6tBAgBTS,EAAAA,SAqBHR,EA1CA,KAkDY,YACF,QC9CVS,EAAA,WAKE,SAAAA,EAAoB9B,GAAAnB,KAAAmB,gBAAAA,EAClBnB,KAAKkD,MAAQ,OAAgB9C,QAC3B,oCACA+C,WACFlB,QAAQC,IAAI,oBAAqBlC,KAAKkD,cAGxCD,EAAAxC,UAAA2C,cAAA,SAActB,EAAcuB,GAC1B,OAAOrD,KAAKkD,MAAMI,WAAW,yBAA0B,KAAMxB,EAAMuB,IAGrEJ,EAAAxC,UAAA8C,YAAA,SAAYzB,EAAc0B,GACxB,OAAOxD,KAAKkD,MAAMI,WAAW,sBAAuB,KAAMxB,EAAM0B,wBAjBnEzC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDANLlB,uHAKT,GCLA0D,EAAA,WAwBE,SAAAA,EACUtC,EACAuC,GADA1D,KAAAmB,gBAAAA,EACAnB,KAAA0D,kBAAAA,EAPD1D,KAAA2D,MAAa,GAyBxB,OAfEF,EAAAhD,UAAAmD,UAAA,WAAA,IAAAxC,EAAApB,KACQ6D,EAAa7D,KAAK2D,MAAMG,OAEX,MADAD,EAAWE,QAAQ,GAEpC/D,KAAK0D,kBAAkBH,YAAYM,EAAY7D,KAAKwD,KAAKQ,OAAOC,UAAS,SAACC,GACxE9C,EAAKyB,QAAUqB,IAGjBlE,KAAK6C,QAAU7C,KAAKmB,gBAAgBjB,YAAYoB,SAC9C,YACAuC,EACA7D,KAAKwD,KAAKQ,4BAnCjB3B,EAAAA,UAASrB,KAAA,CAAC,CAETsB,SAAU,WACVC,SAAU,qUAPHxC,SADAkD,oCAmBND,EAAAA,oBACAA,EAAAA,SAwBHS,EA5CA,GCAAU,EAAA,WAyCE,SAAAA,IAfSnE,KAAA2D,MAAa,GA0BxB,OAvBES,OAAAC,eAAIF,EAAA1D,UAAA,UAAO,KAAX,WACE,OAAOT,KAAKwD,KAAKc,SAAStE,KAAK2D,MAAM7B,uCAGvCsC,OAAAC,eAAIF,EAAA1D,UAAA,QAAK,KAAT,WACE,OAAOT,KAAKwD,KAAKc,SAAStE,KAAK2D,MAAM7B,MAAMkC,WAG7C,SAAUX,GACRrD,KAAKwD,KAAKc,SAAStE,KAAK2D,MAAM7B,MAAMyC,SAASlB,oCAK/Cc,EAAA1D,UAAA+D,SAAA,SAASnB,GACPrD,KAAKgE,MAAQX,GAGfc,EAAA1D,UAAA0B,SAAA,WACOsC,EAAAA,UAAUzE,KAAKgE,SAClBhE,KAAKgE,OAAQ,wBA7ClB3B,EAAAA,UAASrB,KAAA,CAAC,CAETsB,SAAU,UACVC,SAAU,mtBAmBTS,EAAAA,oBACAA,EAAAA,SAyBHmB,EApDA,GCAAO,EAAA,WAmBE,SAAAA,IAHS1E,KAAA2D,MAAa,GAIxB,2BAjBCtB,EAAAA,UAASrB,KAAA,CAAC,CAETsB,SAAU,UACVC,SAAU,4SAUTS,EAAAA,oBACAA,EAAAA,SAGH0B,EApBA,GCAAC,EAAA,WAyCE,SAAAA,IAXS3E,KAAA2D,MAAa,GAYxB,OATES,OAAAC,eAAIM,EAAAlE,UAAA,QAAK,KAAT,WACE,OAAOT,KAAKwD,KAAKc,SAAStE,KAAK2D,MAAM7B,MAAMkC,uCAG7CI,OAAAC,eAAIM,EAAAlE,UAAA,UAAO,KAAX,WACE,OAAOT,KAAKwD,KAAKc,SAAStE,KAAK2D,MAAM7B,2DAnCxCO,EAAAA,UAASrB,KAAA,CAAC,CAETsB,SAAU,WACVC,SAAU,u7BAwBTS,EAAAA,oBACAA,EAAAA,SAWH2B,EA1CA,GCAAC,EAAA,WAGA,SAAAA,IA8BW5E,KAAA2D,MAAa,GAUxB,OAPES,OAAAC,eAAIO,EAAAnE,UAAA,QAAK,KAAT,WACE,OAAOT,KAAKwD,KAAKc,SAAStE,KAAK2D,MAAM7B,MAAMkC,uCAG7CI,OAAAC,eAAIO,EAAAnE,UAAA,UAAO,KAAX,WACE,OAAOT,KAAKwD,KAAKc,SAAStE,KAAK2D,MAAM7B,2DAtCxCO,EAAAA,UAASrB,KAAA,CAAC,CAETsB,SAAU,QACVC,SAAU,k7BA2BTS,EAAAA,oBACAA,EAAAA,SASH4B,EA3CA,GCAAC,EAAA,WAqDE,SAAAA,IAjBS7E,KAAA2D,MAAa,GAkBxB,OAhBES,OAAAC,eAAIQ,EAAApE,UAAA,UAAO,KAAX,WACE,OAAOT,KAAKwD,KAAKc,SAAStE,KAAK2D,MAAM7B,MAAMgD,uCAE7CV,OAAAC,eAAIQ,EAAApE,UAAA,UAAO,KAAX,WACE,OAAOT,KAAKwD,KAAKc,SAAStE,KAAK2D,MAAM7B,MAAMiD,uCAG7CX,OAAAC,eAAIQ,EAAApE,UAAA,QAAK,KAAT,WACE,OAAOT,KAAKwD,KAAKc,SAAStE,KAAK2D,MAAM7B,MAAMkC,uCAG7CI,OAAAC,eAAIQ,EAAApE,UAAA,UAAO,KAAX,WACE,OAAOT,KAAKwD,KAAKc,SAAStE,KAAK2D,MAAM7B,2DA/CxCO,EAAAA,UAASrB,KAAA,CAAC,CAETsB,SAAU,UACVC,SAAU,8/BA8BTS,EAAAA,oBACAA,EAAAA,SAiBH6B,EAtDA,GCAAG,EAAA,WA4DE,SAAAA,EAAoB7D,GAAAnB,KAAAmB,gBAAAA,EA3BXnB,KAAA2D,MAAa,GAUtB3D,KAAAiF,SAAW,kBAkBTjF,KAAKkF,OAASlF,KAAKmB,gBAAgBb,OAAO4E,OAW9C,OA3BEd,OAAAC,eAAIW,EAAAvE,UAAA,UAAO,KAAX,WACE,OAAOT,KAAKwD,KAAKc,SAAStE,KAAK2D,MAAM7B,MAAMgD,uCAE7CV,OAAAC,eAAIW,EAAAvE,UAAA,UAAO,KAAX,WACE,OAAOT,KAAKwD,KAAKc,SAAStE,KAAK2D,MAAM7B,MAAMiD,uCAG7CX,OAAAC,eAAIW,EAAAvE,UAAA,QAAK,KAAT,WACE,OAAOT,KAAKwD,KAAKc,SAAStE,KAAK2D,MAAM7B,MAAMkC,uCAG7CI,OAAAC,eAAIW,EAAAvE,UAAA,UAAO,KAAX,WACE,OAAOT,KAAKwD,KAAKc,SAAStE,KAAK2D,MAAM7B,uCAOvCkD,EAAAvE,UAAA0E,aAAA,eACQnB,EAAQhE,KAAKkF,OAAOE,eAAe,CAAEC,WAAY,CAAC,mBACpDrB,GACFhE,KAAKwD,KAAKc,SAAStE,KAAK2D,MAAM7B,MAAMyC,SAASP,EAAM,yBA/DxD3B,EAAAA,UAASrB,KAAA,CAAC,CAETsB,SAAU,YACVC,SAAU,y5BALHxC,oCA+BNiD,EAAAA,oBACAA,EAAAA,SAsCHgC,EAxEA,GCAAM,EAAA,WAGA,SAAAA,IAiCWtF,KAAA2D,MAAa,GA6BxB,OA3BES,OAAAC,eAAIiB,EAAA7E,UAAA,UAAO,KAAX,WACE,OAAOT,KAAKwD,KAAKc,SAAStE,KAAK2D,MAAM7B,MAAMgD,uCAE7CV,OAAAC,eAAIiB,EAAA7E,UAAA,UAAO,KAAX,WACE,OAAOT,KAAKwD,KAAKc,SAAStE,KAAK2D,MAAM7B,MAAMiD,uCAG7CX,OAAAC,eAAIiB,EAAA7E,UAAA,QAAK,KAAT,WACE,OAAOT,KAAKwD,KAAKc,SAAStE,KAAK2D,MAAM7B,MAAMkC,WAG7C,SAAUX,GACRrD,KAAKwD,KAAKc,SAAStE,KAAK2D,MAAM7B,MAAMyC,SAASlB,oCAG/Ce,OAAAC,eAAIiB,EAAA7E,UAAA,UAAO,KAAX,WACE,OAAOT,KAAKwD,KAAKc,SAAStE,KAAK2D,MAAM7B,uCAGvCwD,EAAA7E,UAAA8E,kBAAA,SAAkBC,EAASC,GACzBA,EAAID,QAAUA,EACdxF,KAAKgE,MAAQhE,KAAK0F,cAAc1F,KAAK2D,MAAMtC,UAG7CiE,EAAA7E,UAAAiF,cAAA,SAAcC,GACZ,OAAOA,EAAWjE,OAAM,SAACkE,GAAK,OAAAA,EAAEJ,UAASK,IAAG,SAACD,GAAK,OAAAA,EAAE5B,6BA5DvD3B,EAAAA,UAASrB,KAAA,CAAC,CAETsB,SAAU,WACVC,SAAU,mjCA8BTS,EAAAA,oBACAA,EAAAA,SA4BHsC,EAjEA,oBC0CE,SAAAQ,EACU3E,EACAuC,EACAqC,GAFA/F,KAAAmB,gBAAAA,EACAnB,KAAA0D,kBAAAA,GACA1D,KAAA+F,MAAAA,GAEFC,eA6EV,OAtFE5B,OAAAC,eAAIyB,EAAArF,UAAA,SAAM,KAAV,WACE,OAAOT,KAAKiG,MAAMC,wCAWpBJ,EAAArF,UAAA0B,SAAA,WAAA,QAAAf,EAAApB,KAEE,GADAiC,QAAQC,IAAI,kBAAmBlC,KAAKiG,OAChCjG,KAAKiG,OAASjG,KAAKiG,MAAMC,OAAQ,KAC7BC,EAAc,cACTC,GACT,GAAe,YAAXA,EAAEzF,8BAKE0F,EAAa,GACbC,EAAkB,GACpBF,EAAEG,UACJF,EAAWG,KAAKC,EAAAA,WAAWF,UAEzBH,EAAEM,YAEe,MADAN,EAAEM,UAAU3C,QAAQ,IAErC9B,QAAQC,IAAI,0BAA2BkE,EAAEM,WACzCJ,EAAgBE,KC/B9B,SAAgBG,EACdjD,EACAqC,EACAa,GAEA,OAAA,SAAQC,GAqBN,OApBA5E,QAAQC,IAAI,oBAAqB0E,GAoB5BC,EAAQC,aAGJD,EAAQC,aAAaC,KAC1BC,EAAAA,aAAa,KACbC,EAAAA,uBACAC,EAAAA,KAAK,GACLC,EAAAA,UAAS,SAACnD,GACR,OAAAN,EAAkBN,cAAcwD,EAAe5C,KAEjD6B,EAAAA,IAAG,SACDuB,GAEE,OADAnF,QAAQC,IAAI,6BAA8BkF,GACrCA,EAGE,KAFE,CAAEC,cAAc,IAG1B,SACDC,GACE,MAAO,CAAED,cAAc,KAG3BE,EAAAA,WAAU,WAAO,OAAA,OACjBC,EAAAA,IAAG,SAACnE,GAAO,OAAApB,QAAQC,IAAI,2BAA4BmB,KACnD6D,EAAAA,KAAK,GACLM,EAAAA,IAAG,WACDX,EAAQY,gBACR1B,EAAMC,kBA1BH0B,EAAAA,GAAG,ODKAf,CACEgB,EAAKjE,kBACLiE,EAAK5B,MACLK,EAAEM,cAINzE,QAAQC,IAAI,sBAAuBkE,EAAEM,WACrCL,EAAWG,KC9DzB,SAAgBoB,EACdzG,EACA4E,EACAa,GAEA,OAAA,SAAQC,GACN5E,QAAQC,IAAI,oBAAqB0E,OAC3B5C,EAAQ6C,EAAQ7C,MAMtB,OALe7C,EAAgBjB,YAAYoB,SACzC,eACAsF,EACA5C,IAMF+B,EAAMC,eACC,OAJLD,EAAMC,eACC,CAAEqB,cAAc,KDgDbO,CACED,EAAKxG,gBACLwG,EAAK5B,MACLK,EAAEM,cAMK,aAAXN,EAAEzF,MAAuByF,EAAE/E,SAAWsG,EAAKpG,YAAY6E,EAAEtE,OAC3DsE,EAAE/E,QAAQwE,IAAG,SACXgC,GAAK,OAACA,EAAErC,QAAUpE,EAAKG,YAAY6E,EAAEtE,MAAMgG,SAASD,EAAE7D,SAItDoC,EAAE2B,aACJJ,EAAKpG,YAAY6E,EAAEtE,MAAQsE,EAAE2B,YAG/B5B,EAAYC,EAAEtE,MAAQ,IAAIkG,EAAAA,YACxBL,EAAKpG,YAAY6E,EAAEtE,OAAS,GAC5BuE,EACAC,GAcJqB,EAAKnE,KAAKyE,WAAW7B,EAAEtE,KAAMqE,EAAYC,EAAEtE,mBA7D7C,IAAgB,IAAAoG,EExCtB,SA4FgBC,EAASN,GACrB,IAAIO,EAAsB,mBAAXC,QAAyBR,EAAEQ,OAAOC,UAAWC,EAAI,EAChE,OAAIH,EAAUA,EAAEI,KAAKX,GACd,CACHY,KAAM,WAEF,OADIZ,GAAKU,GAAKV,EAAE9F,SAAQ8F,OAAI,GACrB,CAAE7D,MAAO6D,GAAKA,EAAEU,KAAMG,MAAOb,KF1D1Bc,CAAA3I,KAAKiG,MAAMC,QAAM0C,EAAAV,EAAAO,QAAAG,EAAAF,KAAAE,EAAAV,EAAAO,OAAA,CAA5B,QAAOG,EAAA5E,kJAoEdhE,KAAK+F,MAAMC,oCA1Gd3D,EAAAA,UAASrB,KAAA,CAAC,CAETsB,SAAU,QACVC,SAAA,+5BAEAsG,gBAAiBC,EAAAA,wBAAwBC,2uCApBlChJ,SADAkD,SAQP+F,EAAAA,oDAgBChG,EAAAA,2BAGAA,EAAAA,oBAGAA,EAAAA,4BAGAA,EAAAA,SA2FH8C,KG3HAmD,EAAA,WAqBE,SAAAA,IATAjJ,KAAAkJ,cAAuC,IAAIC,EAAAA,aAmC7C,OAxBEF,EAAAxI,UAAA0B,SAAA,WACEF,QAAQC,IACN,oBACAlC,KAAKuB,YACLvB,KAAKqB,QACLrB,KAAKwB,SACLxB,KAAKgC,gBAITiH,EAAAxI,UAAA2I,cAAA,SAAczH,GACZ3B,KAAKgC,cAAgBL,EACrB3B,KAAKkJ,cAAcG,KAAK1H,IAG1BsH,EAAAxI,UAAA6I,OAAA,iCApCDjH,EAAAA,UAASrB,KAAA,CAAC,CAETsB,SAAU,UACVC,SAAA,k3BAICS,EAAAA,6BAEAuG,EAAAA,4BAGAvG,EAAAA,uBAEAA,EAAAA,wBAEAA,EAAAA,SA6BHiG,EA/CA,GCDAO,EAAA,WAoCE,SAAAA,EAAoBrI,GAAAnB,KAAAmB,gBAAAA,EAqFtB,OA7FEiD,OAAAC,eAAImF,EAAA/I,UAAA,QAAK,KAAT,WACE,OAAOT,KAAKuB,YAAYvB,KAAKgC,cAAcF,uCAG7CsC,OAAAC,eAAImF,EAAA/I,UAAA,oBAAiB,KAArB,WACE,OAAOT,KAAKwD,KAAKiG,IAAIzJ,KAAKgC,cAAcF,uCAK1C0H,EAAA/I,UAAA0B,SAAA,WACEF,QAAQC,IACN,mBACAlC,KAAKuB,YACLvB,KAAKqB,QACLrB,KAAKwB,SACLxB,KAAKgC,mBAGD0H,EAAwB,GAC1B1J,KAAKqB,QAAQsI,eACfD,EAAiBE,SAAW5J,KAAKqB,QAAQsI,kBAGrCE,EAAa,GACnB7J,KAAKqB,QAAQI,SAASI,QAAO,SAACiI,GAC5BD,EAAWC,EAAEhI,MAAQ,IAAIiI,EAAAA,UAAU,GAAIL,KAEzC1J,KAAKwD,KAAO,IAAIuG,EAAAA,UAAUF,EAAYH,GACtCzH,QAAQC,IAAI,yBAA0BlC,KAAKwD,KAAMkG,IAGnDF,EAAA/I,UAAAuJ,KAAA,WAAA,IAAA5I,EAAApB,KAEE,GADAiC,QAAQC,IAAI,OAAQlC,KAAKwD,KAAMxD,KAAKwD,KAAKsB,MAAO9E,KAAKwD,KAAKQ,OACtDhE,KAAKwD,KAAKsB,MAAO,CACnB7C,QAAQC,IAAI,qBACNX,EAAcvB,KAAKwD,KAAKQ,MAC9B/B,QAAQC,IAAI,SAAUX,GACtBvB,KAAKiK,mBACLjK,KAAKmB,gBAAgBjB,YAAYgK,KAAK,iBAAkB3I,QAC/CvB,KAAKwD,KAAK2G,QACnBnK,KAAKwD,KAAK4G,cAAcnG,UAAS,SAACoG,GAChCpI,QAAQC,IAAI,4CAA6CmI,GAC1C,UAAXA,GACFjJ,EAAK4I,SAIThK,KAAKsK,oBAITd,EAAA/I,UAAAwJ,iBAAA,WACEjK,KAAKuK,aAAe,CAClB1H,QAAS,sBACT2H,MAAOC,IAIXjB,EAAA/I,UAAA6J,iBAAA,WACEtK,KAAKuK,aAAe,CAClB1H,QAAS,qBACT2H,MAAOC,IAIXjB,EAAA/I,UAAAiK,SAAA,SAASpD,GAIP,OAHArF,QAAQC,IAAI,WAAYlC,KAAKwD,KAAKsB,MAAO9E,KAAKwD,KAAMxD,KAAKwD,KAAKQ,OAC9DhE,KAAKgK,OACL1C,EAAEqD,kBACK,GAGTnB,EAAA/I,UAAAmK,YAAA,SAAYjJ,GACV,OAAO3B,KAAKwD,KAAKiG,IAAI9H,EAAQG,OAG/B0H,EAAA/I,UAAAoK,mBAAA,SAAmBlJ,GACjB,OAAO3B,KAAKuB,YAAYI,EAAQG,OAGlC0H,EAAA/I,UAAAqK,uBAAA,SAAuB7E,GACrB,SACEjG,KAAKgC,eACLhC,KAAKgC,cAAcwB,MACnBxD,KAAKgC,cAAcwB,KAAKuH,QAEpB/K,KAAKgC,cAAcwB,KAAKuH,OAAOC,KAAI,SAACC,GAAK,OAAAA,EAAEC,KAAOjF,EAAMiF,2BA1GjE7I,EAAAA,UAASrB,KAAA,CAAC,CAETsB,SAAU,OACVC,SAAA,wxCAROxC,4CAYNiD,EAAAA,2BAEAA,EAAAA,uBAEAA,EAAAA,wBAEAA,EAAAA,SAmGHwG,EAzHA,GCAA2B,EAAA,WAkDE,SAAAA,IACEC,EAAAA,QAAQC,IAAIC,EAAAA,KAEhB,2BA7BCC,EAAAA,SAAQvK,KAAA,CAAC,CACRwK,aAAc,CACZhC,EACAP,EACAnD,EACAtD,EACA8C,EACAN,EACAH,EACAD,EACAD,EACAD,EACAP,EACAV,EACAvC,GAEFuK,UAAW,CAAC1L,EAAiBkD,GAC7ByI,QAAS,CACPC,EAAAA,aACAC,EAAAA,oBACAC,EAAAA,kBACAC,EAAAA,gBAEFC,QAAS,CAAC7K,6CAMZiK,EArDA","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\nimport { ipcRenderer, webFrame, remote } from 'electron';\r\nimport * as childProcess from 'child_process';\r\nimport * as fs from 'fs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ElectronService {\r\n  ipcRenderer: typeof ipcRenderer;\r\n  webFrame: typeof webFrame;\r\n  remote: typeof remote;\r\n  childProcess: typeof childProcess;\r\n  fs: typeof fs;\r\n\r\n  constructor() {\r\n    // Conditional imports\r\n    if (this.isElectron()) {\r\n      // @ts-ignore\r\n      this.ipcRenderer = window.require('electron').ipcRenderer;\r\n      // @ts-ignore\r\n      this.webFrame = window.require('electron').webFrame;\r\n      // @ts-ignore\r\n      this.remote = window.require('electron').remote;\r\n      // @ts-ignore\r\n      this.childProcess = window.require('child_process');\r\n      // @ts-ignore\r\n      this.fs = window.require('fs');\r\n    }\r\n  }\r\n\r\n  isElectron() {\r\n    // @ts-ignore\r\n    return window && window.process && window.process.type;\r\n  }\r\n\r\n  getOSLocale() {\r\n    if (this.isElectron() && this.remote && this.remote.app) {\r\n      return this.remote.app.getLocale();\r\n    }\r\n  }\r\n}\r\n","import { ElectronService } from './services/electron.service';\nimport { Section, PreferenceOptions } from './types/preference.types';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'electron-ng-preferences',\n  templateUrl: './electron-ng-preferences.component.html',\n  styleUrls: ['./electron-ng-preferences.component.scss']\n})\nexport class ElectronNgPreferencesComponent implements OnInit {\n  preferences: any;\n  options: PreferenceOptions;\n  defaults: any;\n  activeSection: Section;\n  constructor(private electronService: ElectronService) {\n    this.options = this.electronService.ipcRenderer.sendSync(\n      'getPreferenceOptions'\n    );\n    this.preferences = this.electronService.ipcRenderer.sendSync(\n      'getPreferences'\n    );\n    this.defaults = this.electronService.ipcRenderer.sendSync('getDefaults');\n\n    this.options.sections = this.options.sections.filter(\n      section => !section.enabled\n    );\n\n    this.options.sections.forEach(section => {\n      if (!this.preferences[section.name]) {\n        this.preferences[section.name] = {};\n      }\n    });\n\n    if (this.options.sections.length > 0) {\n      this.activeSection = this.options.sections[0];\n    }\n\n    console.log('electron-ng-preferences construct', this.options, this.preferences, this.defaults, this.activeSection);\n  }\n\n  ngOnInit() {\n    console.log('electron-ng-preferences init', this.options, this.preferences, this.defaults, this.activeSection);\n  }\n\n  sectionChanged(section: Section) {\n    this.activeSection = section;\n  }\n}\n","import { Component, Input, SimpleChanges, OnChanges } from '@angular/core';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'flash-message',\n  template: `\n    <div\n      class=\"flashMessage animateCss\"\n      [ngClass]=\"{\n        showFlashmessage: showMessage,\n        flashSuccess: message?.level === 'success',\n        flashError: message?.level === 'error'\n      }\"\n      [hidden]=\"!showMessage\"\n    >\n      <span>{{ message?.message }}</span>\n    </div>\n  `,\n  styleUrls: ['./flash-message.component.scss']\n})\nexport class FlashMessageComponent implements OnChanges {\n  @Input() message: FlashMessage;\n  showMessage: boolean;\n\n  constructor() {\n    this.showMessage = false;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this.manageMessage(changes.message.currentValue);\n  }\n  manageMessage(message: FlashMessage) {\n    if (message && message.message && message.message.length > 0) {\n      this.message = message;\n      this.showMessage = true;\n\n      setTimeout(() => {\n        this.showMessage = false;\n        this.message = null;\n      }, 8000);\n    }\n  }\n}\n\nexport interface FlashMessage {\n  message: string;\n  level: FlashMessageLevel;\n  isError?: boolean;\n}\nexport enum FlashMessageLevel {\n  SUCCESS = 'success',\n  ERROR = 'error'\n}\n","import { ElectronService } from './electron.service';\nimport { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n// import rxIpc from 'rx-ipc-electron-six/lib/renderer'; // not working @todo find a better way\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ValidationService {\n  rxIpc: any;\n  constructor(private electronService: ElectronService) {\n    this.rxIpc = (window as any).require(\n      'rx-ipc-electron-six/lib/renderer'\n    ).default;\n    console.log('ValidationService', this.rxIpc);\n  }\n\n  validateAsync(name: string, val: string): Observable<boolean> {\n    return this.rxIpc.runCommand('runObservableValidator', null, name, val);\n  }\n\n  actionAsync(name: string, form: any): Observable<any> {\n    return this.rxIpc.runCommand('runObservableAction', null, name, form);\n  }\n}\n","import { ValidationService } from './../../../services/validation.service';\r\nimport { ElectronService } from './../../../services/electron.service';\r\nimport { Component, Input } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'btnfield',\r\n  template: `\r\n    <div class=\"field field-button\">\r\n      <div class=\"btn\" (click)=\"runAction()\">\r\n        {{ field.label }}\r\n      </div>\r\n      <span class=\"message\" *ngIf=\"message\">{{ message }}</span>\r\n      <span class=\"help\" *ngIf=\"field.help\">{{ field.help }}</span>\r\n    </div>\r\n  `\r\n})\r\nexport class BtnFieldComponent {\r\n  @Input() field: any = {};\r\n  @Input() form: FormGroup;\r\n\r\n  message: string;\r\n\r\n  constructor(\r\n    private electronService: ElectronService,\r\n    private validationService: ValidationService\r\n  ) {}\r\n\r\n  runAction() {\r\n    const actionName = this.field.action;\r\n    const lastLetter = actionName.substr(-1);\r\n    if (lastLetter === '$') {\r\n      this.validationService.actionAsync(actionName, this.form.value).subscribe(res => {\r\n        this.message = res;\r\n      });\r\n    } else {\r\n      this.message = this.electronService.ipcRenderer.sendSync(\r\n        'runAction',\r\n        actionName,\r\n        this.form.value\r\n      );\r\n    }\r\n  }\r\n}\r\n","import { Component, Input, OnInit } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { isBoolean } from 'util';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'boolean',\r\n  template: `\r\n    <div class=\"field field-boolean\">\r\n      <div class=\"field-label\">{{ field.label }}</div>\r\n      <ui-switch [checked]=\"value\" (change)=\"onChange($event)\"></ui-switch>\r\n      <span class=\"error-message\" *ngIf=\"control.errors?.required\"\r\n        >Please fill out this field.</span\r\n      ><span class=\"waiting-message\" *ngIf=\"control.status === 'PENDING'\">\r\n        Validating...\r\n      </span>\r\n      <span\r\n        class=\"error-message\"\r\n        *ngIf=\"control.errors?.dynamicError && field.errorMessage\"\r\n        >{{ field.errorMessage }}</span\r\n      >\r\n      <span class=\"help\" *ngIf=\"field.help\">{{ field.help }}</span>\r\n    </div>\r\n  `\r\n})\r\nexport class BooleanComponent implements OnInit {\r\n  @Input() field: any = {};\r\n  @Input() form: FormGroup;\r\n\r\n  get control() {\r\n    return this.form.controls[this.field.name];\r\n  }\r\n\r\n  get value() {\r\n    return this.form.controls[this.field.name].value;\r\n  }\r\n\r\n  set value(val) {\r\n    this.form.controls[this.field.name].setValue(val);\r\n  }\r\n\r\n  constructor() {}\r\n\r\n  onChange(val: boolean) {\r\n    this.value = val;\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (!isBoolean(this.value)) {\r\n      this.value = false;\r\n    }\r\n  }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'message',\r\n  template: `\r\n    <div class=\"field field-message\">\r\n      <div class=\"field-heading\" *ngIf=\"field.heading\">\r\n        {{ field.heading }}\r\n      </div>\r\n      <div class=\"field-content\" [innerHTML]=\"field.content\"></div>\r\n    </div>\r\n  `\r\n})\r\nexport class MessageComponent {\r\n  @Input() field: any = {};\r\n  @Input() form: FormGroup;\r\n\r\n  constructor() {}\r\n}\r\n","import { Component, Input } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'dropdown',\r\n  template: `\r\n    <div [formGroup]=\"form\">\r\n      <div class=\"field field-dropdown\">\r\n        <div class=\"field-label\">{{ field.label }}</div>\r\n        <select [id]=\"field.name\" [formControlName]=\"field.name\">\r\n          <option value=\"\">-- Select One --</option>\r\n          <option *ngFor=\"let opt of field.options\" [value]=\"opt.value\">{{\r\n            opt.label\r\n          }}</option>\r\n        </select>\r\n        <span class=\"error-message\" *ngIf=\"control.errors?.required\"\r\n          >Please fill out this field.</span\r\n        ><span class=\"waiting-message\" *ngIf=\"control.status === 'PENDING'\">\r\n        Validating...\r\n      </span>\r\n        <span class=\"error-message\" *ngIf=\"control.errors?.dynamicError && field.errorMessage\">{{\r\n          field.errorMessage\r\n        }}</span>\r\n        <span class=\"help\" *ngIf=\"field.help\">{{ field.help }}</span>\r\n      </div>\r\n    </div>\r\n  `\r\n})\r\nexport class DropDownComponent {\r\n  @Input() field: any = {};\r\n  @Input() form: FormGroup;\r\n\r\n  get value() {\r\n    return this.form.controls[this.field.name].value;\r\n  }\r\n\r\n  get control() {\r\n    return this.form.controls[this.field.name];\r\n  }\r\n\r\n  constructor() {}\r\n}\r\n","import { Component, Input } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'radio',\r\n  template: `\r\n    <div [formGroup]=\"form\">\r\n      <div class=\"field field-radio\">\r\n        <div class=\"field-label\">{{ field.label }}</div>\r\n        <div class=\"radio-option\" *ngFor=\"let opt of field.options\">\r\n          <input\r\n            type=\"radio\"\r\n            id=\"{{ field.name }}\"\r\n            [value]=\"opt.value\"\r\n            [formControlName]=\"field.name\"\r\n          />\r\n          <label>{{ opt.label }}</label>\r\n        </div>\r\n        <span class=\"error-message\" *ngIf=\"control.errors?.required\"\r\n          >Please fill out this field.</span\r\n        ><span class=\"waiting-message\" *ngIf=\"control.status === 'PENDING'\">\r\n        Validating...\r\n      </span>\r\n        <span class=\"error-message\" *ngIf=\"control.errors?.dynamicError && field.errorMessage\">{{\r\n          field.errorMessage\r\n        }}</span>\r\n        <span class=\"help\" *ngIf=\"field.help\">{{ field.help }}</span>\r\n      </div>\r\n    </div>\r\n  `\r\n})\r\nexport class RadioComponent {\r\n  @Input() field: any = {};\r\n  @Input() form: FormGroup;\r\n\r\n  get value() {\r\n    return this.form.controls[this.field.name].value;\r\n  }\r\n\r\n  get control() {\r\n    return this.form.controls[this.field.name];\r\n  }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'textbox',\r\n  template: `\r\n    <div [formGroup]=\"form\">\r\n      <div class=\"field field-text\">\r\n        <div class=\"field-label\">{{ field.label }}</div>\r\n        <input\r\n          [attr.type]=\"field.type\"\r\n          class=\"form-control\"\r\n          [id]=\"field.name\"\r\n          [name]=\"field.name\"\r\n          [formControlName]=\"field.name\"\r\n          [readonly]=\"field.readonly\"\r\n          [ngClass]=\"{ 'field-readonly': field.readonly }\"\r\n        />\r\n        <span class=\"error-message\" *ngIf=\"control.errors?.required\"\r\n          >Please fill out this field.</span\r\n        >\r\n        <span class=\"waiting-message\" *ngIf=\"control.status === 'PENDING'\">\r\n          Validating...\r\n        </span>\r\n        <span\r\n          class=\"error-message\"\r\n          *ngIf=\"control.errors?.dynamicError && field.errorMessage\"\r\n          >{{ field.errorMessage }}</span\r\n        >\r\n        <span class=\"help\" *ngIf=\"field.help\">{{ field.help }}</span>\r\n      </div>\r\n    </div>\r\n  `\r\n})\r\nexport class TextBoxComponent {\r\n  @Input() field: any = {};\r\n  @Input() form: FormGroup;\r\n  get isValid() {\r\n    return this.form.controls[this.field.name].valid;\r\n  }\r\n  get isDirty() {\r\n    return this.form.controls[this.field.name].dirty;\r\n  }\r\n\r\n  get value() {\r\n    return this.form.controls[this.field.name].value;\r\n  }\r\n\r\n  get control() {\r\n    return this.form.controls[this.field.name];\r\n  }\r\n\r\n  constructor() {}\r\n}\r\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { ElectronService } from '../../../services/electron.service';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'directory',\r\n  template: `\r\n    <div [formGroup]=\"form\">\r\n      <div class=\"field field-directory\">\r\n        <div class=\"field-label\">{{ field.label }}</div>\r\n        <div class=\"value\">Folder: {{ control?.value }}</div>\r\n        <div class=\"btn\" (click)=\"chooseFolder()\">\r\n          {{ btnLabel }}\r\n        </div>\r\n        <span class=\"error-message\" *ngIf=\"control.errors?.required\"\r\n          >Please fill out this field.</span\r\n        >\r\n        <span\r\n          class=\"error-message\"\r\n          *ngIf=\"control.errors?.dynamicError && field.errorMessage\"\r\n          >{{ field.errorMessage }}</span\r\n        >\r\n        <span class=\"waiting-message\" *ngIf=\"control.status === 'PENDING'\">\r\n          Validating...\r\n        </span>\r\n        <span class=\"help\" *ngIf=\"field.help\">{{ field.help }}</span>\r\n        <input [formControlName]=\"field.name\" type=\"hidden\" />\r\n      </div>\r\n    </div>\r\n  `\r\n})\r\nexport class DirectoryComponent {\r\n  @Input() field: any = {};\r\n  @Input() form: FormGroup;\r\n\r\n  dialog: any;\r\n\r\n  // tslint:disable-next-line:no-output-on-prefix\r\n  // @Output()\r\n  // onChange: EventEmitter<any> = new EventEmitter();\r\n\r\n  selectedFolder: string;\r\n  btnLabel = 'Choose a Folder';\r\n\r\n  get isValid() {\r\n    return this.form.controls[this.field.name].valid;\r\n  }\r\n  get isDirty() {\r\n    return this.form.controls[this.field.name].dirty;\r\n  }\r\n\r\n  get value() {\r\n    return this.form.controls[this.field.name].value;\r\n  }\r\n\r\n  get control() {\r\n    return this.form.controls[this.field.name];\r\n  }\r\n\r\n  constructor(private electronService: ElectronService) {\r\n    this.dialog = this.electronService.remote.dialog;\r\n  }\r\n\r\n  chooseFolder() {\r\n    const value = this.dialog.showOpenDialog({ properties: ['openDirectory'] });\r\n    if (value) {\r\n      this.form.controls[this.field.name].setValue(value[0]);\r\n      // this.onChange.emit(value[0]);\r\n      return;\r\n    }\r\n  }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'checkbox',\r\n  template: `\r\n    <div [formGroup]=\"form\">\r\n      <div [formGroupName]=\"field.name\" class=\"field field-checkbox\">\r\n        <div class=\"field-label\">{{ field.label }}</div>\r\n        <div class=\"checkbox-option\" *ngFor=\"let opt of field.options\">\r\n          <input\r\n            type=\"checkbox\"\r\n            id=\"{{ field.name }}\"\r\n            [checked]=\"opt.checked\"\r\n            [value]=\"opt.value\"\r\n            (change)=\"onChecklistChange($event.target.checked, opt)\"\r\n          />\r\n          <label>{{ opt.label }}</label>\r\n        </div>\r\n        <span class=\"error-message\" *ngIf=\"control.errors?.required\"\r\n          >Please fill out this field.</span\r\n        ><span class=\"waiting-message\" *ngIf=\"control.status === 'PENDING'\">\r\n          Validating...\r\n        </span>\r\n        <span\r\n          class=\"error-message\"\r\n          *ngIf=\"control.errors?.dynamicError && field.errorMessage\"\r\n          >{{ field.errorMessage }}</span\r\n        >\r\n        <span class=\"help\" *ngIf=\"field.help\">{{ field.help }}</span>\r\n      </div>\r\n    </div>\r\n  `\r\n})\r\nexport class CheckBoxComponent {\r\n  @Input() field: any = {};\r\n  @Input() form: FormGroup;\r\n  get isValid() {\r\n    return this.form.controls[this.field.name].valid;\r\n  }\r\n  get isDirty() {\r\n    return this.form.controls[this.field.name].dirty;\r\n  }\r\n\r\n  get value() {\r\n    return this.form.controls[this.field.name].value;\r\n  }\r\n\r\n  set value(val) {\r\n    this.form.controls[this.field.name].setValue(val);\r\n  }\r\n\r\n  get control() {\r\n    return this.form.controls[this.field.name];\r\n  }\r\n\r\n  onChecklistChange(checked, opt) {\r\n    opt.checked = checked;\r\n    this.value = this.flattenValues(this.field.options);\r\n  }\r\n\r\n  flattenValues(checkboxes) {\r\n    return checkboxes.filter(c => c.checked).map(c => c.value);\r\n  }\r\n}\r\n","import { ValidationService } from './../../services/validation.service';\nimport { ElectronService } from './../../services/electron.service';\nimport { Group } from './../../types/preference.types';\nimport {\n  Component,\n  OnInit,\n  Input,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef\n} from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport {\n  dynamicValidatorFn,\n  dynamicAsyncValidatorFn\n} from './validators/dynamic.validator';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'group',\n  templateUrl: './group.component.html',\n  styleUrls: ['./group.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GroupComponent implements OnInit {\n  @Input()\n  group: Group;\n\n  @Input()\n  preferences: any;\n\n  @Input()\n  form: FormGroup;\n\n  @Input()\n  validationOn: string;\n\n  internalForm: FormGroup;\n\n  get fields() {\n    return this.group.fields;\n  }\n\n  constructor(\n    private electronService: ElectronService,\n    private validationService: ValidationService,\n    private cdRef: ChangeDetectorRef\n  ) {\n    cdRef.markForCheck();\n  }\n\n  ngOnInit() {\n    console.log('group.component', this.group);\n    if (this.group && this.group.fields) {\n      const fieldsCtrls = {};\n      for (const f of this.group.fields) {\n        if (f.type === 'message') {\n          // do nothing\n          return;\n        } else {\n          // if (f.type !== 'checkbox') {\n          const validators = [];\n          const asyncValidators = [];\n          if (f.required) {\n            validators.push(Validators.required);\n          }\n          if (f.validator) {\n            const lastLetter = f.validator.substr(-1);\n            if (lastLetter === '$') {\n              console.log('validator is observable', f.validator);\n              asyncValidators.push(\n                dynamicAsyncValidatorFn(\n                  this.validationService,\n                  this.cdRef,\n                  f.validator\n                )\n              );\n            } else {\n              console.log('validator is normal', f.validator);\n              validators.push(\n                dynamicValidatorFn(\n                  this.electronService,\n                  this.cdRef,\n                  f.validator\n                )\n              );\n            }\n          }\n\n          if (f.type === 'checkbox' && f.options && this.preferences[f.name]) {\n            f.options.map(\n              o => (o.checked = this.preferences[f.name].includes(o.value))\n            );\n          }\n\n          if (f.fixedValue) {\n            this.preferences[f.name] = f.fixedValue;\n          }\n\n          fieldsCtrls[f.name] = new FormControl(\n            this.preferences[f.name] || '',\n            validators,\n            asyncValidators\n          );\n        } /* else {\n          const opts = {};\n          for (const opt of f.options) {\n            opts[opt.label] = new FormControl(opt.value);\n          }\n          const formGroup = new FormGroup(opts);\n          if (this.preferences[f.name]) {\n            formGroup.setValue(this.preferences[f.name]);\n          }\n          fieldsCtrls[f.name] = formGroup;\n        }*/\n\n        this.form.addControl(f.name, fieldsCtrls[f.name]);\n      }\n\n      // this.internalForm = new FormGroup(fieldsCtrls);\n      // this.formChange.emit(this.form);\n    }\n\n    this.cdRef.markForCheck();\n  }\n}\n","import { ValidationService } from './../../../services/validation.service';\r\nimport { ElectronService } from './../../../services/electron.service';\r\nimport { ValidatorFn, AbstractControl, AsyncValidatorFn } from '@angular/forms';\r\nimport {\r\n  map,\r\n  catchError,\r\n  first,\r\n  take,\r\n  debounceTime,\r\n  distinctUntilChanged,\r\n  switchMap,\r\n  tap\r\n} from 'rxjs/operators';\r\nimport { Observable, of } from 'rxjs';\r\nimport { ChangeDetectorRef } from '@angular/core';\r\n\r\nexport function dynamicValidatorFn(\r\n  electronService: ElectronService,\r\n  cdRef: ChangeDetectorRef,\r\n  validatorName: string\r\n): ValidatorFn {\r\n  return (control: AbstractControl) => {\r\n    console.log('dynamicalidatorFn', validatorName);\r\n    const value = control.value;\r\n    const result = electronService.ipcRenderer.sendSync(\r\n      'runValidator',\r\n      validatorName,\r\n      value\r\n    );\r\n    if (!result) {\r\n      cdRef.markForCheck();\r\n      return { dynamicError: true };\r\n    }\r\n    cdRef.markForCheck();\r\n    return null;\r\n  };\r\n}\r\n\r\nexport function dynamicAsyncValidatorFn(\r\n  validationService: ValidationService,\r\n  cdRef: ChangeDetectorRef,\r\n  validatorName: string\r\n): AsyncValidatorFn {\r\n  return (control: AbstractControl) => {\r\n    console.log('dynamicalidatorFn', validatorName);\r\n    /*\r\n    const value = control.value;\r\n    return validationService.validateAsync(validatorName, value).pipe(\r\n      map(\r\n        success => {\r\n          console.log('dynamicalidatorFn resulted', success);\r\n          if (!success) {\r\n            return { dynamicError: true };\r\n          }\r\n          return null;\r\n        },\r\n        e => {\r\n          return { dynamicError: true };\r\n        }\r\n      ),\r\n      catchError(() => null),\r\n      take(1)\r\n    );\r\n  };*/\r\n    if (!control.valueChanges) {\r\n      return of(null);\r\n    } else {\r\n      return control.valueChanges.pipe(\r\n        debounceTime(300),\r\n        distinctUntilChanged(),\r\n        take(1),\r\n        switchMap(value =>\r\n          validationService.validateAsync(validatorName, value)\r\n        ),\r\n        map(\r\n          success => {\r\n            console.log('dynamicalidatorFn resulted', success);\r\n            if (!success) {\r\n              return { dynamicError: true };\r\n            }\r\n            return null;\r\n          },\r\n          e => {\r\n            return { dynamicError: true };\r\n          }\r\n        ),\r\n        catchError(() => null),\r\n        tap(val => console.log('dynamicalidatorFn tapped', val)),\r\n        take(1),\r\n        tap(() => {\r\n          control.markAsTouched();\r\n          cdRef.markForCheck();\r\n        })\r\n      );\r\n    }\r\n  };\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Section, PreferenceOptions } from '../types/preference.types';\nimport { Component, OnInit, Output, EventEmitter, Input } from '@angular/core';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'sidebar',\n  templateUrl: './sidebar.component.html',\n  styleUrls: ['./sidebar.component.scss']\n})\nexport class SidebarComponent implements OnInit {\n  @Input()\n  activeSection: Section;\n  @Output()\n  sectionChange: EventEmitter<Section> = new EventEmitter<Section>();\n\n  @Input()\n  preferences: any;\n  @Input()\n  options: PreferenceOptions;\n  @Input()\n  defaults: any;\n\n  constructor() {}\n\n  ngOnInit() {\n    console.log(\n      'sidebar.component',\n      this.preferences,\n      this.options,\n      this.defaults,\n      this.activeSection\n    );\n  }\n\n  selectSection(section: Section) {\n    this.activeSection = section;\n    this.sectionChange.emit(section);\n  }\n\n  onSave() {\n    /*preferences[this.state.activeSection][key] = value;\n\n    this.setState({\n      preferences: preferences\n    });\n\n    ipcRenderer.send('setPreferences', preferences);*/\n  }\n}\n","import {\n  FlashMessage,\n  FlashMessageLevel\n} from './flash-message/flash-message.component';\nimport { ElectronService } from './../services/electron.service';\nimport { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { PreferenceOptions, Section } from '../types/preference.types';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'main',\n  templateUrl: './main.component.html',\n  styleUrls: ['./main.component.scss']\n})\nexport class MainComponent implements OnInit {\n  @Input()\n  activeSection: Section;\n  @Input()\n  preferences: any;\n  @Input()\n  options: PreferenceOptions;\n  @Input()\n  defaults: any;\n\n  form: FormGroup;\n  flashMessage: FlashMessage;\n\n  get prefs() {\n    return this.preferences[this.activeSection.name];\n  }\n\n  get activeSectionForm() {\n    return this.form.get(this.activeSection.name);\n  }\n\n  constructor(private electronService: ElectronService) {}\n\n  ngOnInit() {\n    console.log(\n      'main.component->',\n      this.preferences,\n      this.options,\n      this.defaults,\n      this.activeSection\n    );\n\n    const validatorOptions: any = {};\n    if (this.options.validationOn) {\n      validatorOptions.updateOn = this.options.validationOn;\n    }\n\n    const formGroups = {};\n    this.options.sections.forEach(s => {\n      formGroups[s.name] = new FormGroup({}, validatorOptions);\n    });\n    this.form = new FormGroup(formGroups, validatorOptions);\n    console.log('main.ocmponent form is', this.form, validatorOptions);\n  }\n\n  save() {\n    console.log('save', this.form, this.form.valid, this.form.value);\n    if (this.form.valid) {\n      console.log('form is valid');\n      const preferences = this.form.value;\n      console.log('values', preferences);\n      this.showSavedMessage();\n      this.electronService.ipcRenderer.send('setPreferences', preferences);\n    } else if (this.form.pending) {\n      this.form.statusChanges.subscribe(status => {\n        console.log('statusChanges form was pending and now is', status);\n        if (status === 'VALID') {\n          this.save();\n        }\n      });\n    } else {\n      this.showErrorMessage();\n    }\n  }\n\n  showSavedMessage() {\n    this.flashMessage = {\n      message: 'Successfully saved.',\n      level: FlashMessageLevel.SUCCESS\n    };\n  }\n\n  showErrorMessage() {\n    this.flashMessage = {\n      message: 'Form is not valid.',\n      level: FlashMessageLevel.ERROR\n    };\n  }\n\n  onSubmit(e) {\n    console.log('onsubmit', this.form.valid, this.form, this.form.value);\n    this.save();\n    e.preventDefault();\n    return false;\n  }\n\n  sectionForm(section) {\n    return this.form.get(section.name);\n  }\n\n  sectionPreferences(section) {\n    return this.preferences[section.name];\n  }\n\n  groupInActiveSelection(group) {\n    if (\n      this.activeSection &&\n      this.activeSection.form &&\n      this.activeSection.form.groups\n    ) {\n      if (this.activeSection.form.groups.find(g => g.id === group.id)) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n","import { FlashMessageComponent } from './main/flash-message/flash-message.component';\nimport { BtnFieldComponent } from './main/group/fields/button';\nimport { BooleanComponent } from './main/group/fields/boolean';\nimport { MessageComponent } from './main/group/fields/message';\nimport { ElectronService } from './services/electron.service';\nimport { DropDownComponent } from './main/group/fields/dropdown';\nimport { RadioComponent } from './main/group/fields/radio';\nimport { TextBoxComponent } from './main/group/fields/textbox';\nimport { DirectoryComponent } from './main/group/fields/directory';\nimport { CheckBoxComponent } from './main/group/fields/checkbox';\nimport { GroupComponent } from './main/group/group.component';\nimport { SidebarComponent } from './sidebar/sidebar.component';\nimport { MainComponent } from './main/main.component';\nimport { NgModule } from '@angular/core';\nimport { ElectronNgPreferencesComponent } from './electron-ng-preferences.component';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\n\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { fas } from '@fortawesome/free-solid-svg-icons';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { UiSwitchModule } from 'ngx-ui-switch';\nimport { ValidationService } from './services/validation.service';\n\n@NgModule({\n  declarations: [\n    MainComponent,\n    SidebarComponent,\n    GroupComponent,\n    FlashMessageComponent,\n    CheckBoxComponent,\n    DirectoryComponent,\n    TextBoxComponent,\n    RadioComponent,\n    DropDownComponent,\n    MessageComponent,\n    BooleanComponent,\n    BtnFieldComponent,\n    ElectronNgPreferencesComponent\n  ],\n  providers: [ElectronService, ValidationService],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FontAwesomeModule,\n    UiSwitchModule\n  ],\n  exports: [ElectronNgPreferencesComponent]\n})\nexport class ElectronNgPreferencesModule {\n  constructor() {\n    library.add(fas);\n  }\n}\n"]}