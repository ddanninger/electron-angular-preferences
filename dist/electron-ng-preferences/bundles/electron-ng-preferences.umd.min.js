!function(e,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports,require("util"),require("rxjs/operators"),require("rxjs"),require("@angular/core"),require("@fortawesome/angular-fontawesome"),require("@fortawesome/fontawesome-svg-core"),require("@fortawesome/free-solid-svg-icons"),require("@angular/common"),require("@angular/forms"),require("ngx-ui-switch")):"function"==typeof define&&define.amd?define("electron-ng-preferences",["exports","util","rxjs/operators","rxjs","@angular/core","@fortawesome/angular-fontawesome","@fortawesome/fontawesome-svg-core","@fortawesome/free-solid-svg-icons","@angular/common","@angular/forms","ngx-ui-switch"],n):n(e["electron-ng-preferences"]={},e.util,e.rxjs.operators,e.rxjs,e.ng.core,e.angularFontawesome,e.fontawesomeSvgCore,e.freeSolidSvgIcons,e.ng.common,e.ng.forms,e.ngxUiSwitch)}(this,function(e,n,r,i,t,o,s,a,l,b,c){"use strict";var d=function(){function e(){this.isElectron()&&(this.ipcRenderer=window.require("electron").ipcRenderer,this.webFrame=window.require("electron").webFrame,this.remote=window.require("electron").remote,this.childProcess=window.require("child_process"),this.fs=window.require("fs"))}return e.prototype.isElectron=function(){return window&&window.process&&window.process.type},e.prototype.getOSLocale=function(){if(this.isElectron()&&this.remote&&this.remote.app)return this.remote.app.getLocale()},e.decorators=[{type:t.Injectable,args:[{providedIn:"root"}]}],e.ctorParameters=function(){return[]},e.ngInjectableDef=t.defineInjectable({factory:function(){return new e},token:e,providedIn:"root"}),e}(),f=function(){function e(e){var n=this;this.electronService=e,this.options=this.electronService.ipcRenderer.sendSync("getPreferenceOptions"),this.preferences=this.electronService.ipcRenderer.sendSync("getPreferences"),this.defaults=this.electronService.ipcRenderer.sendSync("getDefaults"),this.options.sections=this.options.sections.filter(function(e){return!e.enabled}),this.options.sections.forEach(function(e){n.preferences[e.name]||(n.preferences[e.name]={})}),0<this.options.sections.length&&(this.activeSection=this.options.sections[0]),console.log("electron-ng-preferences construct",this.options,this.preferences,this.defaults,this.activeSection)}return e.prototype.ngOnInit=function(){console.log("electron-ng-preferences init",this.options,this.preferences,this.defaults,this.activeSection)},e.prototype.sectionChanged=function(e){this.activeSection=e},e.decorators=[{type:t.Component,args:[{selector:"electron-ng-preferences",template:'<div class="preference-window">\r\n<sidebar\r\n  [activeSection]="activeSection"\r\n  [options]="options"\r\n  [preferences]="preferences"\r\n  [defaults]="defaults"\r\n  (sectionChange)="sectionChanged($event)"\r\n></sidebar>\r\n<main\r\n  [activeSection]="activeSection"\r\n  [options]="options"\r\n  [preferences]="preferences"\r\n  [defaults]="defaults"\r\n></main>\r\n</div>',styles:["main{height:100%;min-height:100%;width:600px;min-width:600px;max-width:600px;background-color:#e7e7e7;font-size:14px;overflow:hidden;cursor:default;overflow-x:hidden;overflow-y:auto}sidebar{height:100%;min-height:100%;width:199px;min-width:199px;max-width:199px;border-right:1px solid #b8b8b9;display:flex;flex-direction:column;justify-content:flex-start;cursor:default;overflow-x:hidden;overflow-y:auto;background-color:#fff}.preference-window{height:100vh;width:100vw;display:flex}"]}]}],e.ctorParameters=function(){return[{type:d}]},e}(),p=function(){function e(e){this.electronService=e,this.rxIpc=window.require("rx-ipc-electron-six/lib/renderer")["default"],console.log("ValidationService",this.rxIpc)}return e.prototype.validateAsync=function(e,n){return this.rxIpc.runCommand("runObservableValidator",null,e,n)},e.prototype.actionAsync=function(e,n){return this.rxIpc.runCommand("runObservableAction",null,e,n)},e.decorators=[{type:t.Injectable,args:[{providedIn:"root"}]}],e.ctorParameters=function(){return[{type:d}]},e.ngInjectableDef=t.defineInjectable({factory:function(){return new e(t.inject(d))},token:e,providedIn:"root"}),e}(),u=function(){function e(e,n){this.electronService=e,this.validationService=n,this.field={}}return e.prototype.runAction=function(){var n=this,e=this.field.action;"$"===e.substr(-1)?this.validationService.actionAsync(e,this.form.value).subscribe(function(e){n.message=e}):this.message=this.electronService.ipcRenderer.sendSync("runAction",e,this.form.value)},e.decorators=[{type:t.Component,args:[{selector:"btnfield",template:'\n    <div class="field field-button">\n      <div class="btn" (click)="runAction()">\n        {{ field.label }}\n      </div>\n      <span class="message" *ngIf="message">{{ message }}</span>\n      <span class="help" *ngIf="field.help">{{ field.help }}</span>\n    </div>\n  '}]}],e.ctorParameters=function(){return[{type:d},{type:p}]},e.propDecorators={field:[{type:t.Input}],form:[{type:t.Input}]},e}(),m=function(){function e(){this.field={}}return Object.defineProperty(e.prototype,"control",{get:function(){return this.form.controls[this.field.name]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"value",{get:function(){return this.form.controls[this.field.name].value},set:function(e){this.form.controls[this.field.name].setValue(e)},enumerable:!0,configurable:!0}),e.prototype.onChange=function(e){this.value=e},e.prototype.ngOnInit=function(){n.isBoolean(this.value)||(this.value=!1)},e.decorators=[{type:t.Component,args:[{selector:"boolean",template:'\n    <div class="field field-boolean">\n      <div class="field-label">{{ field.label }}</div>\n      <ui-switch (change)="onChange($event)"></ui-switch>\n      <span class="error-message" *ngIf="control.errors?.required"\n        >Please fill out this field.</span\n      ><span class="waiting-message" *ngIf="control.status === \'PENDING\'">\n        Validating...\n      </span>\n      <span\n        class="error-message"\n        *ngIf="control.errors?.dynamicError && field.errorMessage"\n        >{{ field.errorMessage }}</span\n      >\n      <span class="help" *ngIf="field.help">{{ field.help }}</span>\n    </div>\n  '}]}],e.ctorParameters=function(){return[]},e.propDecorators={field:[{type:t.Input}],form:[{type:t.Input}]},e}(),g=function(){function e(){this.field={}}return e.decorators=[{type:t.Component,args:[{selector:"message",template:'\n    <div class="field field-message">\n      <div class="field-heading" *ngIf="field.heading">\n        {{ field.heading }}\n      </div>\n      <div class="field-content" [innerHTML]="field.content"></div>\n    </div>\n  '}]}],e.ctorParameters=function(){return[]},e.propDecorators={field:[{type:t.Input}],form:[{type:t.Input}]},e}(),h=function(){function e(){this.field={}}return Object.defineProperty(e.prototype,"value",{get:function(){return this.form.controls[this.field.name].value},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"control",{get:function(){return this.form.controls[this.field.name]},enumerable:!0,configurable:!0}),e.decorators=[{type:t.Component,args:[{selector:"dropdown",template:'\n    <div [formGroup]="form">\n      <div class="field field-dropdown">\n        <div class="field-label">{{ field.label }}</div>\n        <select [id]="field.name" [formControlName]="field.name">\n          <option value="">-- Select One --</option>\n          <option *ngFor="let opt of field.options" [value]="opt.value">{{\n            opt.label\n          }}</option>\n        </select>\n        <span class="error-message" *ngIf="control.errors?.required"\n          >Please fill out this field.</span\n        ><span class="waiting-message" *ngIf="control.status === \'PENDING\'">\n        Validating...\n      </span>\n        <span class="error-message" *ngIf="control.errors?.dynamicError && field.errorMessage">{{\n          field.errorMessage\n        }}</span>\n        <span class="help" *ngIf="field.help">{{ field.help }}</span>\n      </div>\n    </div>\n  '}]}],e.ctorParameters=function(){return[]},e.propDecorators={field:[{type:t.Input}],form:[{type:t.Input}]},e}(),v=function(){function e(){this.field={}}return Object.defineProperty(e.prototype,"value",{get:function(){return this.form.controls[this.field.name].value},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"control",{get:function(){return this.form.controls[this.field.name]},enumerable:!0,configurable:!0}),e.decorators=[{type:t.Component,args:[{selector:"radio",template:'\n    <div [formGroup]="form">\n      <div class="field field-radio">\n        <div class="field-label">{{ field.label }}</div>\n        <div class="radio-option" *ngFor="let opt of field.options">\n          <input\n            type="radio"\n            id="{{ field.name }}"\n            [value]="opt.value"\n            [formControlName]="field.name"\n          />\n          <label>{{ opt.label }}</label>\n        </div>\n        <span class="error-message" *ngIf="control.errors?.required"\n          >Please fill out this field.</span\n        ><span class="waiting-message" *ngIf="control.status === \'PENDING\'">\n        Validating...\n      </span>\n        <span class="error-message" *ngIf="control.errors?.dynamicError && field.errorMessage">{{\n          field.errorMessage\n        }}</span>\n        <span class="help" *ngIf="field.help">{{ field.help }}</span>\n      </div>\n    </div>\n  '}]}],e.propDecorators={field:[{type:t.Input}],form:[{type:t.Input}]},e}(),y=function(){function e(){this.field={}}return Object.defineProperty(e.prototype,"isValid",{get:function(){return this.form.controls[this.field.name].valid},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isDirty",{get:function(){return this.form.controls[this.field.name].dirty},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"value",{get:function(){return this.form.controls[this.field.name].value},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"control",{get:function(){return this.form.controls[this.field.name]},enumerable:!0,configurable:!0}),e.decorators=[{type:t.Component,args:[{selector:"textbox",template:'\n    <div [formGroup]="form">\n      <div class="field field-text">\n        <div class="field-label">{{ field.label }}</div>\n        <input\n          [attr.type]="field.type"\n          class="form-control"\n          [id]="field.name"\n          [name]="field.name"\n          [formControlName]="field.name"\n        />\n        <span class="error-message" *ngIf="control.errors?.required"\n          >Please fill out this field.</span\n        >\n        <span class="waiting-message" *ngIf="control.status === \'PENDING\'">\n          Validating...\n        </span>\n        <span\n          class="error-message"\n          *ngIf="control.errors?.dynamicError && field.errorMessage"\n          >{{ field.errorMessage }}</span\n        >\n        <span class="help" *ngIf="field.help">{{ field.help }}</span>\n      </div>\n    </div>\n  '}]}],e.ctorParameters=function(){return[]},e.propDecorators={field:[{type:t.Input}],form:[{type:t.Input}]},e}(),x=function(){function e(e){this.electronService=e,this.field={},this.btnLabel="Choose a Folder",this.dialog=this.electronService.remote.dialog}return Object.defineProperty(e.prototype,"isValid",{get:function(){return this.form.controls[this.field.name].valid},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isDirty",{get:function(){return this.form.controls[this.field.name].dirty},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"value",{get:function(){return this.form.controls[this.field.name].value},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"control",{get:function(){return this.form.controls[this.field.name]},enumerable:!0,configurable:!0}),e.prototype.chooseFolder=function(){var e=this.dialog.showOpenDialog({properties:["openDirectory"]});e&&this.form.controls[this.field.name].setValue(e[0])},e.decorators=[{type:t.Component,args:[{selector:"directory",template:'\n    <div [formGroup]="form">\n      <div class="field field-directory">\n        <div class="field-label">{{ field.label }}</div>\n        <div class="value">Folder: {{ control?.value }}</div>\n        <div class="btn" (click)="chooseFolder()">\n          {{ btnLabel }}\n        </div>\n        <span class="error-message" *ngIf="control.errors?.required"\n          >Please fill out this field.</span\n        >\n        <span class="error-message" *ngIf="control.errors?.dynamicError && field.errorMessage">{{\n          field.errorMessage\n        }}</span>\n        <span class="help" *ngIf="field.help">{{ field.help }}</span>\n        <input [formControlName]="field.name" type="hidden" />\n      </div>\n    </div>\n  '}]}],e.ctorParameters=function(){return[{type:d}]},e.propDecorators={field:[{type:t.Input}],form:[{type:t.Input}]},e}(),w=function(){function e(){this.field={}}return Object.defineProperty(e.prototype,"isValid",{get:function(){return this.form.controls[this.field.name].valid},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isDirty",{get:function(){return this.form.controls[this.field.name].dirty},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"value",{get:function(){return this.form.controls[this.field.name].value},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"control",{get:function(){return this.form.controls[this.field.name]},enumerable:!0,configurable:!0}),e.decorators=[{type:t.Component,args:[{selector:"checkbox",template:'\n    <div [formGroup]="form">\n      <div [formGroupName]="field.name" class="field field-checkbox">\n        <div class="field-label">{{ field.label }}</div>\n        <div class="checkbox-option" *ngFor="let opt of field.options">\n          <input\n            type="checkbox"\n            id="{{ field.name }}"\n            [formControlName]="opt.label"\n          />\n          <label>{{ opt.label }}</label>\n        </div>\n        <span class="error-message" *ngIf="control.errors?.required"\n          >Please fill out this field.</span\n        ><span class="waiting-message" *ngIf="control.status === \'PENDING\'">\n        Validating...\n      </span>\n        <span class="error-message" *ngIf="control.errors?.dynamicError && field.errorMessage">{{\n          field.errorMessage\n        }}</span>\n        <span class="help" *ngIf="field.help">{{ field.help }}</span>\n      </div>\n    </div>\n  '}]}],e.propDecorators={field:[{type:t.Input}],form:[{type:t.Input}]},e}();function I(e){var n="function"==typeof Symbol&&e[Symbol.iterator],t=0;return n?n.call(e):{next:function(){return e&&t>=e.length&&(e=void 0),{value:e&&e[t++],done:!e}}}}function S(t,o,r){return function(e){console.log("dynamicalidatorFn",r);var n=e.value;return t.ipcRenderer.sendSync("runValidator",r,n)?(o.markForCheck(),null):(o.markForCheck(),{dynamicError:!0})}}function C(n,t,o){return function(e){return console.log("dynamicalidatorFn",o),e.valueChanges?e.valueChanges.pipe(r.debounceTime(300),r.distinctUntilChanged(),r.take(1),r.switchMap(function(e){return n.validateAsync(o,e)}),r.map(function(e){return console.log("dynamicalidatorFn resulted",e),e?null:{dynamicError:!0}},function(e){return{dynamicError:!0}}),r.catchError(function(){return null}),r.tap(function(e){return console.log("dynamicalidatorFn tapped",e)}),r.take(1),r.tap(function(){e.markAsTouched(),t.markForCheck()})):i.of(null)}}var P=function(){function e(e,n,t){this.electronService=e,this.validationService=n,(this.cdRef=t).markForCheck()}return Object.defineProperty(e.prototype,"fields",{get:function(){return this.group.fields},enumerable:!0,configurable:!0}),e.prototype.ngOnInit=function(){var e,n,t,o;if(console.log("group.component",this.group),this.group&&this.group.fields){var r={};try{for(var i=I(this.group.fields),s=i.next();!s.done;s=i.next()){var a=s.value;if("message"===a.type)return;if("checkbox"!==a.type){var l=[],c=[];if(a.required&&l.push(b.Validators.required),a.validator)"$"===a.validator.substr(-1)?(console.log("validator is observable",a.validator),c.push(C(this.validationService,this.cdRef,a.validator))):(console.log("validator is normal",a.validator),l.push(S(this.electronService,this.cdRef,a.validator)));r[a.name]=new b.FormControl(this.preferences[a.name]||"",l,c)}else{var d={};try{for(var f=I(a.options),p=f.next();!p.done;p=f.next()){var u=p.value;d[u.label]=new b.FormControl(u.value)}}catch(g){t={error:g}}finally{try{p&&!p.done&&(o=f["return"])&&o.call(f)}finally{if(t)throw t.error}}var m=new b.FormGroup(d);this.preferences[a.name]&&m.setValue(this.preferences[a.name]),r[a.name]=m}this.form.addControl(a.name,r[a.name])}}catch(h){e={error:h}}finally{try{s&&!s.done&&(n=i["return"])&&n.call(i)}finally{if(e)throw e.error}}}this.cdRef.markForCheck()},e.decorators=[{type:t.Component,args:[{selector:"group",template:'<div class="group-label" *ngIf="group.label">{{ group.label }}</div>\n<div *ngFor="let field of fields">\n  <ng-container [ngSwitch]="field.type">\n    <textbox *ngSwitchCase="\'text\'" [field]="field" [form]="form"></textbox>\n    <dropdown\n      *ngSwitchCase="\'dropdown\'"\n      [field]="field"\n      [form]="form"\n    ></dropdown>\n    <checkbox\n      *ngSwitchCase="\'checkbox\'"\n      [field]="field"\n      [form]="form"\n    ></checkbox>\n    <radio *ngSwitchCase="\'radio\'" [field]="field" [form]="form"></radio>\n    <directory\n      *ngSwitchCase="\'directory\'"\n      [field]="field"\n      [form]="form"\n    ></directory>\n    <message *ngSwitchCase="\'message\'" [field]="field" [form]="form"></message>\n    <boolean *ngSwitchCase="\'boolean\'" [field]="field" [form]="form"></boolean>\n    <btnfield *ngSwitchCase="\'button\'" [field]="field" [form]="form"></btnfield>\n  </ng-container>\n</div>\n',changeDetection:t.ChangeDetectionStrategy.OnPush,styles:["::ng-deep .group-label{font-size:16px;font-weight:700;text-transform:uppercase;border-bottom:1px dashed #000;margin-bottom:10px}::ng-deep .field{margin-bottom:20px}::ng-deep .field:last-child{margin-bottom:0}::ng-deep .field .field-label{border-bottom:1px dashed #ccc;margin-bottom:10px}::ng-deep .field .help{display:block;padding-top:5px;padding-bottom:5px;font-size:12px}::ng-deep .field .btn{display:inline-block;background-color:#d9dadb;color:#000;padding:5px;border-radius:0;margin-top:5px;border:1px solid rgba(0,0,0,.25)}::ng-deep .field .btn:hover{cursor:pointer;background-color:#a7a8a8}::ng-deep .field-text input{width:100%;font-size:14px;padding:4px}::ng-deep .field-dropdown select{width:100%;font-size:14px;padding:4px}::ng-deep .field-button .messsage{display:block;padding-top:5px;padding-bottom:5px;font-size:12px}::ng-deep .field-message .field-heading{border-bottom:1px dashed #ccc;margin-bottom:10px}::ng-deep .error-message{display:block;padding-top:5px;padding-bottom:5px;font-size:12px;color:#8c0707}"]}]}],e.ctorParameters=function(){return[{type:d},{type:p},{type:t.ChangeDetectorRef}]},e.propDecorators={group:[{type:t.Input}],preferences:[{type:t.Input}],form:[{type:t.Input}],validationOn:[{type:t.Input}]},e}(),O=function(){function e(){this.sectionChange=new t.EventEmitter}return e.prototype.ngOnInit=function(){console.log("sidebar.component",this.preferences,this.options,this.defaults,this.activeSection)},e.prototype.selectSection=function(e){this.activeSection=e,this.sectionChange.emit(e)},e.prototype.onSave=function(){},e.decorators=[{type:t.Component,args:[{selector:"sidebar",template:'<div\n  class="sidebar-section"\n  *ngFor="let section of options?.sections"\n  [ngClass]="{ \'active\': activeSection?.name === section.name }"\n  (click)="selectSection(section)"\n>\n  <fa-icon\n    class="section-icon"\n    [icon]="[\'fas\', section.icon]"\n    [fixedWidth]="true"\n  ></fa-icon>\n  <span class="section-label">{{ section.label }}</span>\n</div>\n',styles:[".sidebar-section{height:40px;min-height:40px;max-height:40px;width:199px;min-width:199px;max-width:199px;overflow:hidden;padding:4px;display:flex;flex-direction:row;justify-content:flex-start;align-items:center}.sidebar-section.active,.sidebar-section:hover{background-color:#f5f5f5}.sidebar-section .section-icon{margin-right:4px;width:30px;max-width:30px;min-width:30px}.sidebar-section .section-label{font-size:12px}"]}]}],e.ctorParameters=function(){return[]},e.propDecorators={activeSection:[{type:t.Input}],sectionChange:[{type:t.Output}],preferences:[{type:t.Input}],options:[{type:t.Input}],defaults:[{type:t.Input}]},e}(),k=function(){function e(e){this.fb=e}return Object.defineProperty(e.prototype,"prefs",{get:function(){return this.preferences[this.activeSection.name]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"activeSectionForm",{get:function(){return this.form.get(this.activeSection.name)},enumerable:!0,configurable:!0}),e.prototype.ngOnInit=function(){console.log("main.component",this.preferences,this.options,this.defaults,this.activeSection);var n={};this.options.validationOn&&(n.updateOn=this.options.validationOn);var t={};this.options.sections.forEach(function(e){t[e.name]=new b.FormGroup({},n)}),this.form=new b.FormGroup(t,n),console.log("main.ocmponent form is",this.form,n)},e.prototype.save=function(){if(console.log("save",this.form,this.form.value),this.form.valid){console.log("form is valid");this.form.value}else this.form.pending&&this.form.statusChanges.subscribe(function(e){console.log("statusChanges form was pending and now is",e)})},e.prototype.onSubmit=function(){console.log("onsubmit",this.form.valid,this.form,this.form.value)},e.decorators=[{type:t.Component,args:[{selector:"main",template:'<form (ngSubmit)="onSubmit()" [formGroup]="form">\r\n  <div class="groups">\r\n    <group\r\n      *ngFor="let group of activeSection?.form?.groups"\r\n      [group]="group"\r\n      [preferences]="prefs"\r\n      [form]="activeSectionForm"\r\n      [validationOn]="options.validationOn"\r\n    ></group>\r\n  </div>\r\n  <div class="bottom-bar">\r\n    <span *ngIf="form.valid">VALID</span>\r\n    <span *ngIf="form.invalid">INVALID</span>\r\n    <span *ngIf="form.pending">PENDING</span>\r\n    <button type="submit" class="btn btn-primary">\r\n      \x3c!-- [disabled]="!form.valid" --\x3e\r\n      Save\r\n    </button>\r\n  </div>\r\n</form>\r\n',styles:[".groups{height:calc(100vh - 40px);padding:10px;overflow:auto}.bottom-bar{padding:5px;text-align:right;background:#dcdcdc;border-top:1px solid #cecece}.bottom-bar button{background:rgba(2,95,43,.72);border:none;padding:5px 10px;font-size:14px;color:#fff;transition:width 2s;font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica,sans-serif}.bottom-bar button:hover{background:#000;border:none}"]}]}],e.ctorParameters=function(){return[{type:b.FormBuilder}]},e.propDecorators={activeSection:[{type:t.Input}],preferences:[{type:t.Input}],options:[{type:t.Input}],defaults:[{type:t.Input}]},e}(),j=function(){function e(){s.library.add(a.fas)}return e.decorators=[{type:t.NgModule,args:[{declarations:[k,O,P,w,x,y,v,h,g,m,u,f],providers:[d,p],imports:[l.CommonModule,b.ReactiveFormsModule,o.FontAwesomeModule,c.UiSwitchModule],exports:[f]}]}],e.ctorParameters=function(){return[]},e}();e.ElectronNgPreferencesComponent=f,e.ElectronNgPreferencesModule=j,e.ɵl=m,e.ɵm=u,e.ɵf=w,e.ɵg=x,e.ɵj=h,e.ɵk=g,e.ɵi=v,e.ɵh=y,e.ɵd=P,e.ɵb=k,e.ɵa=d,e.ɵe=p,e.ɵc=O,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=electron-ng-preferences.umd.min.js.map