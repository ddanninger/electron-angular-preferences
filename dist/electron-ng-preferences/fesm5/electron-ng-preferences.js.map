{"version":3,"file":"electron-ng-preferences.js.map","sources":["ng://electron-ng-preferences/lib/services/electron.service.ts","ng://electron-ng-preferences/lib/electron-ng-preferences.component.ts","ng://electron-ng-preferences/lib/main/flash-message/flash-message.component.ts","ng://electron-ng-preferences/lib/services/validation.service.ts","ng://electron-ng-preferences/lib/main/group/fields/button.ts","ng://electron-ng-preferences/lib/main/group/fields/boolean.ts","ng://electron-ng-preferences/lib/main/group/fields/message.ts","ng://electron-ng-preferences/lib/main/group/fields/dropdown.ts","ng://electron-ng-preferences/lib/main/group/fields/radio.ts","ng://electron-ng-preferences/lib/main/group/fields/textbox.ts","ng://electron-ng-preferences/lib/main/group/fields/directory.ts","ng://electron-ng-preferences/lib/main/group/fields/checkbox.ts","ng://electron-ng-preferences/lib/main/group/validators/dynamic.validator.ts","ng://electron-ng-preferences/lib/main/group/group.component.ts","ng://electron-ng-preferences/lib/sidebar/sidebar.component.ts","ng://electron-ng-preferences/lib/main/main.component.ts","ng://electron-ng-preferences/lib/electron-ng-preferences.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\nimport { ipcRenderer, webFrame, remote } from 'electron';\r\nimport * as childProcess from 'child_process';\r\nimport * as fs from 'fs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ElectronService {\r\n  ipcRenderer: typeof ipcRenderer;\r\n  webFrame: typeof webFrame;\r\n  remote: typeof remote;\r\n  childProcess: typeof childProcess;\r\n  fs: typeof fs;\r\n\r\n  constructor() {\r\n    // Conditional imports\r\n    if (this.isElectron()) {\r\n      // @ts-ignore\r\n      this.ipcRenderer = window.require('electron').ipcRenderer;\r\n      // @ts-ignore\r\n      this.webFrame = window.require('electron').webFrame;\r\n      // @ts-ignore\r\n      this.remote = window.require('electron').remote;\r\n      // @ts-ignore\r\n      this.childProcess = window.require('child_process');\r\n      // @ts-ignore\r\n      this.fs = window.require('fs');\r\n    }\r\n  }\r\n\r\n  isElectron() {\r\n    // @ts-ignore\r\n    return window && window.process && window.process.type;\r\n  }\r\n\r\n  getOSLocale() {\r\n    if (this.isElectron() && this.remote && this.remote.app) {\r\n      return this.remote.app.getLocale();\r\n    }\r\n  }\r\n}\r\n","import { ElectronService } from './services/electron.service';\nimport { Section, PreferenceOptions } from './types/preference.types';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'electron-ng-preferences',\n  templateUrl: './electron-ng-preferences.component.html',\n  styleUrls: ['./electron-ng-preferences.component.scss']\n})\nexport class ElectronNgPreferencesComponent implements OnInit {\n  preferences: any;\n  options: PreferenceOptions;\n  defaults: any;\n  activeSection: Section;\n  constructor(private electronService: ElectronService) {\n    this.options = this.electronService.ipcRenderer.sendSync(\n      'getPreferenceOptions'\n    );\n    this.preferences = this.electronService.ipcRenderer.sendSync(\n      'getPreferences'\n    );\n    this.defaults = this.electronService.ipcRenderer.sendSync('getDefaults');\n\n    this.options.sections = this.options.sections.filter(\n      section => !section.enabled\n    );\n\n    this.options.sections.forEach(section => {\n      if (!this.preferences[section.name]) {\n        this.preferences[section.name] = {};\n      }\n    });\n\n    if (this.options.sections.length > 0) {\n      this.activeSection = this.options.sections[0];\n    }\n\n    console.log('electron-ng-preferences construct', this.options, this.preferences, this.defaults, this.activeSection);\n  }\n\n  ngOnInit() {\n    console.log('electron-ng-preferences init', this.options, this.preferences, this.defaults, this.activeSection);\n  }\n\n  sectionChanged(section: Section) {\n    this.activeSection = section;\n  }\n}\n","import { Component, Input, SimpleChanges, OnChanges } from '@angular/core';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'flash-message',\n  template: `\n    <div\n      class=\"flashMessage animateCss\"\n      [ngClass]=\"{\n        showFlashmessage: showMessage,\n        flashSuccess: message?.level === 'success',\n        flashError: message?.level === 'error'\n      }\"\n      [hidden]=\"!showMessage\"\n    >\n      <span>{{ message?.message }}</span>\n    </div>\n  `,\n  styleUrls: ['./flash-message.component.scss']\n})\nexport class FlashMessageComponent implements OnChanges {\n  @Input() message: FlashMessage;\n  showMessage: boolean;\n\n  constructor() {\n    this.showMessage = false;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this.manageMessage(changes.message.currentValue);\n  }\n  manageMessage(message: FlashMessage) {\n    if (message && message.message && message.message.length > 0) {\n      this.message = message;\n      this.showMessage = true;\n\n      setTimeout(() => {\n        this.showMessage = false;\n        this.message = null;\n      }, 8000);\n    }\n  }\n}\n\nexport interface FlashMessage {\n  message: string;\n  level: FlashMessageLevel;\n  isError?: boolean;\n}\nexport enum FlashMessageLevel {\n  SUCCESS = 'success',\n  ERROR = 'error'\n}\n","import { ElectronService } from './electron.service';\nimport { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n// import rxIpc from 'rx-ipc-electron-six/lib/renderer'; // not working @todo find a better way\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ValidationService {\n  rxIpc: any;\n  constructor(private electronService: ElectronService) {\n    this.rxIpc = (window as any).require(\n      'rx-ipc-electron-six/lib/renderer'\n    ).default;\n    console.log('ValidationService', this.rxIpc);\n  }\n\n  validateAsync(name: string, val: string): Observable<boolean> {\n    return this.rxIpc.runCommand('runObservableValidator', null, name, val);\n  }\n\n  actionAsync(name: string, form: any): Observable<any> {\n    return this.rxIpc.runCommand('runObservableAction', null, name, form);\n  }\n}\n","import { ValidationService } from './../../../services/validation.service';\r\nimport { ElectronService } from './../../../services/electron.service';\r\nimport { Component, Input } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'btnfield',\r\n  template: `\r\n    <div class=\"field field-button\">\r\n      <div class=\"btn\" (click)=\"runAction()\">\r\n        {{ field.label }}\r\n      </div>\r\n      <span class=\"message\" *ngIf=\"message\">{{ message }}</span>\r\n      <span class=\"help\" *ngIf=\"field.help\">{{ field.help }}</span>\r\n    </div>\r\n  `\r\n})\r\nexport class BtnFieldComponent {\r\n  @Input() field: any = {};\r\n  @Input() form: FormGroup;\r\n\r\n  message: string;\r\n\r\n  constructor(\r\n    private electronService: ElectronService,\r\n    private validationService: ValidationService\r\n  ) {}\r\n\r\n  runAction() {\r\n    const actionName = this.field.action;\r\n    const lastLetter = actionName.substr(-1);\r\n    if (lastLetter === '$') {\r\n      this.validationService.actionAsync(actionName, this.form.value).subscribe(res => {\r\n        this.message = res;\r\n      });\r\n    } else {\r\n      this.message = this.electronService.ipcRenderer.sendSync(\r\n        'runAction',\r\n        actionName,\r\n        this.form.value\r\n      );\r\n    }\r\n  }\r\n}\r\n","import { Component, Input, OnInit } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { isBoolean } from 'util';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'boolean',\r\n  template: `\r\n    <div class=\"field field-boolean\">\r\n      <div class=\"field-label\">{{ field.label }}</div>\r\n      <ui-switch [checked]=\"value\" (change)=\"onChange($event)\"></ui-switch>\r\n      <span class=\"error-message\" *ngIf=\"control.errors?.required\"\r\n        >Please fill out this field.</span\r\n      ><span class=\"waiting-message\" *ngIf=\"control.status === 'PENDING'\">\r\n        Validating...\r\n      </span>\r\n      <span\r\n        class=\"error-message\"\r\n        *ngIf=\"control.errors?.dynamicError && field.errorMessage\"\r\n        >{{ field.errorMessage }}</span\r\n      >\r\n      <span class=\"help\" *ngIf=\"field.help\">{{ field.help }}</span>\r\n    </div>\r\n  `\r\n})\r\nexport class BooleanComponent implements OnInit {\r\n  @Input() field: any = {};\r\n  @Input() form: FormGroup;\r\n\r\n  get control() {\r\n    return this.form.controls[this.field.name];\r\n  }\r\n\r\n  get value() {\r\n    return this.form.controls[this.field.name].value;\r\n  }\r\n\r\n  set value(val) {\r\n    this.form.controls[this.field.name].setValue(val);\r\n  }\r\n\r\n  constructor() {}\r\n\r\n  onChange(val: boolean) {\r\n    this.value = val;\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (!isBoolean(this.value)) {\r\n      this.value = false;\r\n    }\r\n  }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'message',\r\n  template: `\r\n    <div class=\"field field-message\">\r\n      <div class=\"field-heading\" *ngIf=\"field.heading\">\r\n        {{ field.heading }}\r\n      </div>\r\n      <div class=\"field-content\" [innerHTML]=\"field.content\"></div>\r\n    </div>\r\n  `\r\n})\r\nexport class MessageComponent {\r\n  @Input() field: any = {};\r\n  @Input() form: FormGroup;\r\n\r\n  constructor() {}\r\n}\r\n","import { Component, Input } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'dropdown',\r\n  template: `\r\n    <div [formGroup]=\"form\">\r\n      <div class=\"field field-dropdown\">\r\n        <div class=\"field-label\">{{ field.label }}</div>\r\n        <select [id]=\"field.name\" [formControlName]=\"field.name\">\r\n          <option value=\"\">-- Select One --</option>\r\n          <option *ngFor=\"let opt of field.options\" [value]=\"opt.value\">{{\r\n            opt.label\r\n          }}</option>\r\n        </select>\r\n        <span class=\"error-message\" *ngIf=\"control.errors?.required\"\r\n          >Please fill out this field.</span\r\n        ><span class=\"waiting-message\" *ngIf=\"control.status === 'PENDING'\">\r\n        Validating...\r\n      </span>\r\n        <span class=\"error-message\" *ngIf=\"control.errors?.dynamicError && field.errorMessage\">{{\r\n          field.errorMessage\r\n        }}</span>\r\n        <span class=\"help\" *ngIf=\"field.help\">{{ field.help }}</span>\r\n      </div>\r\n    </div>\r\n  `\r\n})\r\nexport class DropDownComponent {\r\n  @Input() field: any = {};\r\n  @Input() form: FormGroup;\r\n\r\n  get value() {\r\n    return this.form.controls[this.field.name].value;\r\n  }\r\n\r\n  get control() {\r\n    return this.form.controls[this.field.name];\r\n  }\r\n\r\n  constructor() {}\r\n}\r\n","import { Component, Input } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'radio',\r\n  template: `\r\n    <div [formGroup]=\"form\">\r\n      <div class=\"field field-radio\">\r\n        <div class=\"field-label\">{{ field.label }}</div>\r\n        <div class=\"radio-option\" *ngFor=\"let opt of field.options\">\r\n          <input\r\n            type=\"radio\"\r\n            id=\"{{ field.name }}\"\r\n            [value]=\"opt.value\"\r\n            [formControlName]=\"field.name\"\r\n          />\r\n          <label>{{ opt.label }}</label>\r\n        </div>\r\n        <span class=\"error-message\" *ngIf=\"control.errors?.required\"\r\n          >Please fill out this field.</span\r\n        ><span class=\"waiting-message\" *ngIf=\"control.status === 'PENDING'\">\r\n        Validating...\r\n      </span>\r\n        <span class=\"error-message\" *ngIf=\"control.errors?.dynamicError && field.errorMessage\">{{\r\n          field.errorMessage\r\n        }}</span>\r\n        <span class=\"help\" *ngIf=\"field.help\">{{ field.help }}</span>\r\n      </div>\r\n    </div>\r\n  `\r\n})\r\nexport class RadioComponent {\r\n  @Input() field: any = {};\r\n  @Input() form: FormGroup;\r\n\r\n  get value() {\r\n    return this.form.controls[this.field.name].value;\r\n  }\r\n\r\n  get control() {\r\n    return this.form.controls[this.field.name];\r\n  }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'textbox',\r\n  template: `\r\n    <div [formGroup]=\"form\">\r\n      <div class=\"field field-text\">\r\n        <div class=\"field-label\">{{ field.label }}</div>\r\n        <input\r\n          [attr.type]=\"field.type\"\r\n          class=\"form-control\"\r\n          [id]=\"field.name\"\r\n          [name]=\"field.name\"\r\n          [formControlName]=\"field.name\"\r\n          [readonly]=\"field.readonly\"\r\n          [ngClass]=\"{ 'field-readonly': field.readonly }\"\r\n        />\r\n        <span class=\"error-message\" *ngIf=\"control.errors?.required\"\r\n          >Please fill out this field.</span\r\n        >\r\n        <span class=\"waiting-message\" *ngIf=\"control.status === 'PENDING'\">\r\n          Validating...\r\n        </span>\r\n        <span\r\n          class=\"error-message\"\r\n          *ngIf=\"control.errors?.dynamicError && field.errorMessage\"\r\n          >{{ field.errorMessage }}</span\r\n        >\r\n        <span class=\"help\" *ngIf=\"field.help\">{{ field.help }}</span>\r\n      </div>\r\n    </div>\r\n  `\r\n})\r\nexport class TextBoxComponent {\r\n  @Input() field: any = {};\r\n  @Input() form: FormGroup;\r\n  get isValid() {\r\n    return this.form.controls[this.field.name].valid;\r\n  }\r\n  get isDirty() {\r\n    return this.form.controls[this.field.name].dirty;\r\n  }\r\n\r\n  get value() {\r\n    return this.form.controls[this.field.name].value;\r\n  }\r\n\r\n  get control() {\r\n    return this.form.controls[this.field.name];\r\n  }\r\n\r\n  constructor() {}\r\n}\r\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { ElectronService } from '../../../services/electron.service';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'directory',\r\n  template: `\r\n    <div [formGroup]=\"form\">\r\n      <div class=\"field field-directory\">\r\n        <div class=\"field-label\">{{ field.label }}</div>\r\n        <div class=\"value\">Folder: {{ control?.value }}</div>\r\n        <div class=\"btn\" (click)=\"chooseFolder()\">\r\n          {{ btnLabel }}\r\n        </div>\r\n        <span class=\"error-message\" *ngIf=\"control.errors?.required\"\r\n          >Please fill out this field.</span\r\n        >\r\n        <span\r\n          class=\"error-message\"\r\n          *ngIf=\"control.errors?.dynamicError && field.errorMessage\"\r\n          >{{ field.errorMessage }}</span\r\n        >\r\n        <span class=\"waiting-message\" *ngIf=\"control.status === 'PENDING'\">\r\n          Validating...\r\n        </span>\r\n        <span class=\"help\" *ngIf=\"field.help\">{{ field.help }}</span>\r\n        <input [formControlName]=\"field.name\" type=\"hidden\" />\r\n      </div>\r\n    </div>\r\n  `\r\n})\r\nexport class DirectoryComponent {\r\n  @Input() field: any = {};\r\n  @Input() form: FormGroup;\r\n\r\n  dialog: any;\r\n\r\n  // tslint:disable-next-line:no-output-on-prefix\r\n  // @Output()\r\n  // onChange: EventEmitter<any> = new EventEmitter();\r\n\r\n  selectedFolder: string;\r\n  btnLabel = 'Choose a Folder';\r\n\r\n  get isValid() {\r\n    return this.form.controls[this.field.name].valid;\r\n  }\r\n  get isDirty() {\r\n    return this.form.controls[this.field.name].dirty;\r\n  }\r\n\r\n  get value() {\r\n    return this.form.controls[this.field.name].value;\r\n  }\r\n\r\n  get control() {\r\n    return this.form.controls[this.field.name];\r\n  }\r\n\r\n  constructor(private electronService: ElectronService) {\r\n    this.dialog = this.electronService.remote.dialog;\r\n  }\r\n\r\n  chooseFolder() {\r\n    const value = this.dialog.showOpenDialog({ properties: ['openDirectory'] });\r\n    if (value) {\r\n      this.form.controls[this.field.name].setValue(value[0]);\r\n      // this.onChange.emit(value[0]);\r\n      return;\r\n    }\r\n  }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'checkbox',\r\n  template: `\r\n    <div [formGroup]=\"form\">\r\n      <div [formGroupName]=\"field.name\" class=\"field field-checkbox\">\r\n        <div class=\"field-label\">{{ field.label }}</div>\r\n        <div class=\"checkbox-option\" *ngFor=\"let opt of field.options\">\r\n          <input\r\n            type=\"checkbox\"\r\n            id=\"{{ field.name }}\"\r\n            [checked]=\"opt.checked\"\r\n            [value]=\"opt.value\"\r\n            (change)=\"onChecklistChange($event.target.checked, opt)\"\r\n          />\r\n          <label>{{ opt.label }}</label>\r\n        </div>\r\n        <span class=\"error-message\" *ngIf=\"control.errors?.required\"\r\n          >Please fill out this field.</span\r\n        ><span class=\"waiting-message\" *ngIf=\"control.status === 'PENDING'\">\r\n          Validating...\r\n        </span>\r\n        <span\r\n          class=\"error-message\"\r\n          *ngIf=\"control.errors?.dynamicError && field.errorMessage\"\r\n          >{{ field.errorMessage }}</span\r\n        >\r\n        <span class=\"help\" *ngIf=\"field.help\">{{ field.help }}</span>\r\n      </div>\r\n    </div>\r\n  `\r\n})\r\nexport class CheckBoxComponent {\r\n  @Input() field: any = {};\r\n  @Input() form: FormGroup;\r\n  get isValid() {\r\n    return this.form.controls[this.field.name].valid;\r\n  }\r\n  get isDirty() {\r\n    return this.form.controls[this.field.name].dirty;\r\n  }\r\n\r\n  get value() {\r\n    return this.form.controls[this.field.name].value;\r\n  }\r\n\r\n  set value(val) {\r\n    this.form.controls[this.field.name].setValue(val);\r\n  }\r\n\r\n  get control() {\r\n    return this.form.controls[this.field.name];\r\n  }\r\n\r\n  onChecklistChange(checked, opt) {\r\n    opt.checked = checked;\r\n    this.value = this.flattenValues(this.field.options);\r\n  }\r\n\r\n  flattenValues(checkboxes) {\r\n    return checkboxes.filter(c => c.checked).map(c => c.value);\r\n  }\r\n}\r\n","import { ValidationService } from './../../../services/validation.service';\r\nimport { ElectronService } from './../../../services/electron.service';\r\nimport { ValidatorFn, AbstractControl, AsyncValidatorFn } from '@angular/forms';\r\nimport {\r\n  map,\r\n  catchError,\r\n  first,\r\n  take,\r\n  debounceTime,\r\n  distinctUntilChanged,\r\n  switchMap,\r\n  tap\r\n} from 'rxjs/operators';\r\nimport { Observable, of } from 'rxjs';\r\nimport { ChangeDetectorRef } from '@angular/core';\r\n\r\nexport function dynamicValidatorFn(\r\n  electronService: ElectronService,\r\n  cdRef: ChangeDetectorRef,\r\n  validatorName: string\r\n): ValidatorFn {\r\n  return (control: AbstractControl) => {\r\n    console.log('dynamicalidatorFn', validatorName);\r\n    const value = control.value;\r\n    const result = electronService.ipcRenderer.sendSync(\r\n      'runValidator',\r\n      validatorName,\r\n      value\r\n    );\r\n    if (!result) {\r\n      cdRef.markForCheck();\r\n      return { dynamicError: true };\r\n    }\r\n    cdRef.markForCheck();\r\n    return null;\r\n  };\r\n}\r\n\r\nexport function dynamicAsyncValidatorFn(\r\n  validationService: ValidationService,\r\n  cdRef: ChangeDetectorRef,\r\n  validatorName: string\r\n): AsyncValidatorFn {\r\n  return (control: AbstractControl) => {\r\n    console.log('dynamicalidatorFn', validatorName);\r\n    /*\r\n    const value = control.value;\r\n    return validationService.validateAsync(validatorName, value).pipe(\r\n      map(\r\n        success => {\r\n          console.log('dynamicalidatorFn resulted', success);\r\n          if (!success) {\r\n            return { dynamicError: true };\r\n          }\r\n          return null;\r\n        },\r\n        e => {\r\n          return { dynamicError: true };\r\n        }\r\n      ),\r\n      catchError(() => null),\r\n      take(1)\r\n    );\r\n  };*/\r\n    if (!control.valueChanges) {\r\n      return of(null);\r\n    } else {\r\n      return control.valueChanges.pipe(\r\n        debounceTime(300),\r\n        distinctUntilChanged(),\r\n        take(1),\r\n        switchMap(value =>\r\n          validationService.validateAsync(validatorName, value)\r\n        ),\r\n        map(\r\n          success => {\r\n            console.log('dynamicalidatorFn resulted', success);\r\n            if (!success) {\r\n              return { dynamicError: true };\r\n            }\r\n            return null;\r\n          },\r\n          e => {\r\n            return { dynamicError: true };\r\n          }\r\n        ),\r\n        catchError(() => null),\r\n        tap(val => console.log('dynamicalidatorFn tapped', val)),\r\n        take(1),\r\n        tap(() => {\r\n          control.markAsTouched();\r\n          cdRef.markForCheck();\r\n        })\r\n      );\r\n    }\r\n  };\r\n}\r\n","import { ValidationService } from './../../services/validation.service';\nimport { ElectronService } from './../../services/electron.service';\nimport { Group } from './../../types/preference.types';\nimport {\n  Component,\n  OnInit,\n  Input,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef\n} from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport {\n  dynamicValidatorFn,\n  dynamicAsyncValidatorFn\n} from './validators/dynamic.validator';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'group',\n  templateUrl: './group.component.html',\n  styleUrls: ['./group.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GroupComponent implements OnInit {\n  @Input()\n  group: Group;\n\n  @Input()\n  preferences: any;\n\n  @Input()\n  form: FormGroup;\n\n  @Input()\n  validationOn: string;\n\n  internalForm: FormGroup;\n\n  get fields() {\n    return this.group.fields;\n  }\n\n  constructor(\n    private electronService: ElectronService,\n    private validationService: ValidationService,\n    private cdRef: ChangeDetectorRef\n  ) {\n    cdRef.markForCheck();\n  }\n\n  ngOnInit() {\n    console.log('group.component', this.group);\n    if (this.group && this.group.fields) {\n      const fieldsCtrls = {};\n      for (const f of this.group.fields) {\n        if (f.type === 'message') {\n          // do nothing\n          return;\n        } else {\n          // if (f.type !== 'checkbox') {\n          const validators = [];\n          const asyncValidators = [];\n          if (f.required) {\n            validators.push(Validators.required);\n          }\n          if (f.validator) {\n            const lastLetter = f.validator.substr(-1);\n            if (lastLetter === '$') {\n              console.log('validator is observable', f.validator);\n              asyncValidators.push(\n                dynamicAsyncValidatorFn(\n                  this.validationService,\n                  this.cdRef,\n                  f.validator\n                )\n              );\n            } else {\n              console.log('validator is normal', f.validator);\n              validators.push(\n                dynamicValidatorFn(\n                  this.electronService,\n                  this.cdRef,\n                  f.validator\n                )\n              );\n            }\n          }\n\n          if (f.type === 'checkbox' && f.options && this.preferences[f.name]) {\n            f.options.map(\n              o => (o.checked = this.preferences[f.name].includes(o.value))\n            );\n          }\n\n          if (f.fixedValue) {\n            this.preferences[f.name] = f.fixedValue;\n          }\n\n          fieldsCtrls[f.name] = new FormControl(\n            this.preferences[f.name] || '',\n            validators,\n            asyncValidators\n          );\n        } /* else {\n          const opts = {};\n          for (const opt of f.options) {\n            opts[opt.label] = new FormControl(opt.value);\n          }\n          const formGroup = new FormGroup(opts);\n          if (this.preferences[f.name]) {\n            formGroup.setValue(this.preferences[f.name]);\n          }\n          fieldsCtrls[f.name] = formGroup;\n        }*/\n\n        this.form.addControl(f.name, fieldsCtrls[f.name]);\n      }\n\n      // this.internalForm = new FormGroup(fieldsCtrls);\n      // this.formChange.emit(this.form);\n    }\n\n    this.cdRef.markForCheck();\n  }\n}\n","import { Section, PreferenceOptions } from '../types/preference.types';\nimport { Component, OnInit, Output, EventEmitter, Input } from '@angular/core';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'sidebar',\n  templateUrl: './sidebar.component.html',\n  styleUrls: ['./sidebar.component.scss']\n})\nexport class SidebarComponent implements OnInit {\n  @Input()\n  activeSection: Section;\n  @Output()\n  sectionChange: EventEmitter<Section> = new EventEmitter<Section>();\n\n  @Input()\n  preferences: any;\n  @Input()\n  options: PreferenceOptions;\n  @Input()\n  defaults: any;\n\n  constructor() {}\n\n  ngOnInit() {\n    console.log(\n      'sidebar.component',\n      this.preferences,\n      this.options,\n      this.defaults,\n      this.activeSection\n    );\n  }\n\n  selectSection(section: Section) {\n    this.activeSection = section;\n    this.sectionChange.emit(section);\n  }\n\n  onSave() {\n    /*preferences[this.state.activeSection][key] = value;\n\n    this.setState({\n      preferences: preferences\n    });\n\n    ipcRenderer.send('setPreferences', preferences);*/\n  }\n}\n","import {\n  FlashMessage,\n  FlashMessageLevel\n} from './flash-message/flash-message.component';\nimport { ElectronService } from './../services/electron.service';\nimport { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { PreferenceOptions, Section } from '../types/preference.types';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'main',\n  templateUrl: './main.component.html',\n  styleUrls: ['./main.component.scss']\n})\nexport class MainComponent implements OnInit {\n  @Input()\n  activeSection: Section;\n  @Input()\n  preferences: any;\n  @Input()\n  options: PreferenceOptions;\n  @Input()\n  defaults: any;\n\n  form: FormGroup;\n  flashMessage: FlashMessage;\n\n  get prefs() {\n    return this.preferences[this.activeSection.name];\n  }\n\n  get activeSectionForm() {\n    return this.form.get(this.activeSection.name);\n  }\n\n  constructor(private electronService: ElectronService) {}\n\n  ngOnInit() {\n    console.log(\n      'main.component->',\n      this.preferences,\n      this.options,\n      this.defaults,\n      this.activeSection\n    );\n\n    const validatorOptions: any = {};\n    if (this.options.validationOn) {\n      validatorOptions.updateOn = this.options.validationOn;\n    }\n\n    const formGroups = {};\n    this.options.sections.forEach(s => {\n      formGroups[s.name] = new FormGroup({}, validatorOptions);\n    });\n    this.form = new FormGroup(formGroups, validatorOptions);\n    console.log('main.ocmponent form is', this.form, validatorOptions);\n  }\n\n  save() {\n    console.log('save', this.form, this.form.valid, this.form.value);\n    if (this.form.valid) {\n      console.log('form is valid');\n      const preferences = this.form.value;\n      console.log('values', preferences);\n      this.showSavedMessage();\n      this.electronService.ipcRenderer.send('setPreferences', preferences);\n    } else if (this.form.pending) {\n      this.form.statusChanges.subscribe(status => {\n        console.log('statusChanges form was pending and now is', status);\n        if (status === 'VALID') {\n          this.save();\n        }\n      });\n    } else {\n      this.showErrorMessage();\n    }\n  }\n\n  showSavedMessage() {\n    this.flashMessage = {\n      message: 'Successfully saved.',\n      level: FlashMessageLevel.SUCCESS\n    };\n  }\n\n  showErrorMessage() {\n    this.flashMessage = {\n      message: 'Form is not valid.',\n      level: FlashMessageLevel.ERROR\n    };\n  }\n\n  onSubmit(e) {\n    console.log('onsubmit', this.form.valid, this.form, this.form.value);\n    this.save();\n    e.preventDefault();\n    return false;\n  }\n\n  sectionForm(section) {\n    return this.form.get(section.name);\n  }\n\n  sectionPreferences(section) {\n    return this.preferences[section.name];\n  }\n\n  groupInActiveSelection(group) {\n    if (\n      this.activeSection &&\n      this.activeSection.form &&\n      this.activeSection.form.groups\n    ) {\n      if (this.activeSection.form.groups.find(g => g.id === group.id)) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n","import { FlashMessageComponent } from './main/flash-message/flash-message.component';\nimport { BtnFieldComponent } from './main/group/fields/button';\nimport { BooleanComponent } from './main/group/fields/boolean';\nimport { MessageComponent } from './main/group/fields/message';\nimport { ElectronService } from './services/electron.service';\nimport { DropDownComponent } from './main/group/fields/dropdown';\nimport { RadioComponent } from './main/group/fields/radio';\nimport { TextBoxComponent } from './main/group/fields/textbox';\nimport { DirectoryComponent } from './main/group/fields/directory';\nimport { CheckBoxComponent } from './main/group/fields/checkbox';\nimport { GroupComponent } from './main/group/group.component';\nimport { SidebarComponent } from './sidebar/sidebar.component';\nimport { MainComponent } from './main/main.component';\nimport { NgModule } from '@angular/core';\nimport { ElectronNgPreferencesComponent } from './electron-ng-preferences.component';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\n\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { fas } from '@fortawesome/free-solid-svg-icons';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { UiSwitchModule } from 'ngx-ui-switch';\nimport { ValidationService } from './services/validation.service';\n\n@NgModule({\n  declarations: [\n    MainComponent,\n    SidebarComponent,\n    GroupComponent,\n    FlashMessageComponent,\n    CheckBoxComponent,\n    DirectoryComponent,\n    TextBoxComponent,\n    RadioComponent,\n    DropDownComponent,\n    MessageComponent,\n    BooleanComponent,\n    BtnFieldComponent,\n    ElectronNgPreferencesComponent\n  ],\n  providers: [ElectronService, ValidationService],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FontAwesomeModule,\n    UiSwitchModule\n  ],\n  exports: [ElectronNgPreferencesComponent]\n})\nexport class ElectronNgPreferencesModule {\n  constructor() {\n    library.add(fas);\n  }\n}\n"],"names":["tslib_1.__values"],"mappings":"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"}
